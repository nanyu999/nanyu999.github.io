<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HEU KMS Activator系统/Office激活</title>
    <url>/heu-kms-activator-xi-tong-office-ji-huo.html</url>
    <content><![CDATA[<p>经常重装系统的小伙伴应该知道，每次重装完系统之后都要重新激活系统和Office，但正版激活序列一般较贵，所以很多人喜欢在某购物平台上买激活序列。</p>

<p>其实，除了购买激活序列，还有一种方式可以激活系统和Office，即使用KMS激活，这也是微软官方认可的一种系统激活方式，它的激活命令是由微软官方提供、官方可查询。</p>

<p>而今天小钉分享的这款，是由大神知彼而知己开发，多年来备受好评，多年前曾开放源码。这款软件激活成功率高、安全无毒、无捆绑后门、可断网激活。
</p>

<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="#软件介绍"></a>#软件介绍</h3><p>软件名称:<b> HEU KMS Activator </b><br>软件大小：7.1M<br>适用系统：Win<br>下载地址：见文末<br></p>
<p>虽然软件安全无毒，但杀毒软件会误报，所以如果出现误报，请先关闭杀毒软件。</p>



<p>如果当前系统还没有激活，软件可以识别最佳的激活方式。</p>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/mmexport1616574986985.jpg" style="zoom:67%;">

<p>同时软件可检测系统系统是否已经激活，如果已经激活也可重置激活。</p>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/mmexport1616574990958.jpg" style="zoom:67%;">

<p>可使用KMS激活方式来激活系统或激活Office。</p>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/mmexport1616574993498.jpg" style="zoom:67%;">

<p>也可以使用数字许可证激活方式或KMS38方式激活系统。</p>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/mmexport1616574996330.jpg" style="zoom:67%;">

<p>最近的版本又新增了OEM激活方式。</p>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/mmexport1616574998966.jpg" style="zoom:67%;">

<br>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/mmexport1616575001704.jpg" style="zoom:67%;">

<p>软件作者开设的也有微信公众号，名叫：知彼而知己，有兴趣的可以去作者的公众号看看哦。</p>

<p>今天的分享就到这啦，有需要的小伙伴建议收藏起来，暂时用不到的也可以收藏起来，有备无患~</p>

<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="#软件下载"></a>#软件下载</h3><br>

<p><a href="https://nanyu.lanzous.com/ifgJgn4m13i">点我下载</a></p>
<center>欢迎关注微信公众号：钉子君</center>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/_export1615371698717.jpg.png" style="zoom:50%;">]]></content>
      <categories>
        <category>好软推荐</category>
      </categories>
      <tags>
        <tag>系统工具</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Hive入门</title>
    <url>/hive-ru-men.html</url>
    <content><![CDATA[<h3 id="1-1-Hive-是什么"><a href="#1-1-Hive-是什么" class="headerlink" title="1.1 Hive 是什么"></a>1.1 Hive 是什么</h3><hr>
Hive是领英公司开发，是基于Hadoop的一个开源<font color="red">数据仓库</font>工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行，需要注意的是，Hive并不是数据库。



<blockquote>
<p><strong>数据仓库：</strong>数据仓库注重存储、查询数据（并不注重对数据的查删改等操作）</p>
<p> <strong>数据库：</strong>数据库注重管理数据，比如对数据的增删改查等操作。</p>
<p><strong>Mysql\Oracle:</strong> 数据库管理软件。</p>
</blockquote>
<p>Hive 提供了一系列的工具，可以用来进行数据的提取、转换和加载【ETL】，是一种可以<strong>存储</strong>、<strong>查询</strong>和分析存储在 Hadoop中的大规模数据的架构体系。</p>
<h3 id="1-2-为什么要有Hive"><a href="#1-2-为什么要有Hive" class="headerlink" title="1.2 为什么要有Hive"></a>1.2 为什么要有Hive</h3><hr>

<p>Hive 简化了 MapReduce 的开发难度，只要会 SQL，不需要去实现底层Map Reduce代码，就能快速的上手 </p>
<p>Hive，通过简单的 SQL 语句就能实现复杂的 MapReduce 所能达到的功能。（通过简单的Sql语句，即可实现</p>
<p>MapReduce大多数功能）</p>
<h3 id="1-3-Hive的优点"><a href="#1-3-Hive的优点" class="headerlink" title="1.3 Hive的优点"></a>1.3 Hive的优点</h3><hr>

<ul>
<li><p>简单容易上手操作接口采用类 SQL 语法，提供快速开发的能力。</p>
</li>
<li><p>学习成本低避免了去写MapReduce，减少开发人员的学习成本。</p>
</li>
<li><p>可扩展Hive 可以自由扩展集群规模，一般情况下不需要重启服务</p>
</li>
<li><p>延展性Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数</p>
</li>
<li><p>容错性良好的容错性，即使节点出现问题 SQL 仍能够正常完成</p>
</li>
</ul>
<h3 id="1-4-Hive的缺点"><a href="#1-4-Hive的缺点" class="headerlink" title="1.4 Hive的缺点"></a>1.4 Hive的缺点</h3><hr>

<ul>
<li><p>Hive 的 HQL 表达能力有限迭代式算法无法表达，比如 pagerank 。数据挖掘方面，比如 k-means .</p>
</li>
<li><p>Hive 的效率比较低Hive 自动生成的 MapReduce 作业，通常情况下不够智能化</p>
</li>
<li><p>Hive 调优比较困难，粒度较粗</p>
</li>
<li><p>Hive 可控性差</p>
</li>
</ul>
<h3 id="1-5-Hive与传统数据库的比较"><a href="#1-5-Hive与传统数据库的比较" class="headerlink" title="1.5 Hive与传统数据库的比较"></a>1.5 Hive与传统数据库的比较</h3><hr>
<br>
<table><thead><tr><th>项目</th> <th>Hive</th> <th>传统数据库</th></tr></thead> <tbody><tr><td>查询语言</td> <td>HiveQL</td> <td>SQL</td></tr> <tr><td>存储</td> <td>HDFS【理论上无限存储】</td> <td>存储有限，随着容量增加，计算速度急剧下降</td></tr> <tr><td>执行引擎</td> <td>依赖于 MR/Spark框架，无法进行良好的性能优化</td> <td>可以选择更加有效的算法执行查询，以此提高执行效率</td></tr> <tr><td>灵活性</td> <td>元数据独立存储，数据存储在HDFS上，耦合度降低</td> <td>数据用途单一，耦合度高</td></tr> <tr><td>执行效率</td> <td>在大数据情况下，执行效率远远高于传统数据库</td> <td>在少量数据情况下，比较快</td></tr> <tr><td>延迟性</td> <td>高</td> <td>低</td></tr> <tr><td>数据加载模式</td> <td>读时模式</td> <td>写时模式</td></tr> <tr><td>数据操作</td> <td>数据覆盖追加</td> <td>行级更新删除</td></tr> <tr><td>索引</td> <td>0.7.0版本后加入，索引比较简单</td> <td>复杂索引</td></tr> <tr><td>事务</td> <td>支持，只能对数据库和表设置锁</td> <td>完全支持，具备完善的事务机制</td></tr> <tr><td>可靠性</td> <td>借助于 HDFS 数据有备份</td> <td>需要设置数据库的热备，以防止丢失</td></tr> <tr><td>基本环境</td> <td></td> <td></td></tr> <tr><td>应用场景</td> <td>大规模数据分析查询</td> <td>小规模数据的实时查询</td></tr> <tr><td>费用</td> <td>开源，免费</td> <td>商业应用，收费较高</td></tr></tbody></table>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>3.Hive基本命令</title>
    <url>/hive-ji-ben-ming-ling-yi.html</url>
    <content><![CDATA[<h3 id="3-1-Beeline命令"><a href="#3-1-Beeline命令" class="headerlink" title="3.1 Beeline命令"></a>3.1 Beeline命令</h3><hr>
Beeline是 Hive 0.11版本引入的新命令行客户端工具,基于SQLLine CLI的JDBC客户端。

<p>Beeline支持内嵌模式(embedded mode)和远程模式(remote mode)。在嵌入式模式下，运行嵌入式的Hive(类似Hive CLI)，而远程模式可以通过Thrift连接到独立的HiveServer2进程上。从Hive 0.14版本开始，Beeline使用HiveServer2工作时，它也会从HiveServer2输出日志信息到STDERR。</p>
<ul>
<li><strong>Hive的三种安装方式</strong></li>
</ul>
<blockquote>
<p>内嵌模式：不需要额外安装元数据库，采用的是Hive默认的Derby数据库，但这种模式有极大的缺陷就在于只允许一个 Hive 会话连接。</p>
<p>独立模式：在安装 Hive 的节点上安装一个 MySQL 服务端，并且将 <code>hive.metastore.local</code> 设置为 <code>true</code></p>
<p>远程模式：将 Hive 服务端与元数据的存储地址分开，元数据直接存储在远程的数据库服务器上即可。因此这里我们采用的是 node01 安装 Hive 服务端，而node03 安装 MySQL，以此来实现 Hive 与元数据的解耦操作。</p>
</blockquote>
<p>Beeline和其他工具有一些不同，执行查询都是正常的SQL输入。</p>
<ul>
<li><p>create databases;【创建数据库】</p>
</li>
<li><p>select * from table_name;【查询表】</p>
</li>
</ul>
<p>但是如果是一些管理的命令，比如进行连接，中断，退出，执行Beeline命令需要带上“!”，不需要终止符。</p>
<ul>
<li><strong>!connect url</strong> 【连接不同的Hive2服务器】</li>
<li><strong>!exit</strong> 【退出shell】</li>
<li><strong>!help</strong> 【显示全部命令列表】</li>
<li><strong>!verbose</strong> 【显示查询追加的明细】</li>
</ul>
<h3 id="3-2-hive-e"><a href="#3-2-hive-e" class="headerlink" title="3.2 hive  -e"></a>3.2 hive  -e</h3><hr>

<p>不用进入交互窗口就能执行数据库相关命令</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@node02</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># hive -e "show databases";</span>
<span class="token comment">## 以下是结果</span>
which: <span class="token keyword">no</span> hbase <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>bin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>jre<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>bin:<span class="token operator">/</span>root<span class="token operator">/</span>bin<span class="token punctuation">)</span>
SLF4J: Class path <span class="token keyword">contains</span> multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.10</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span><span class="token keyword">share</span><span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.25</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: See http:<span class="token comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span>
SLF4J: Actual binding <span class="token operator">is</span> <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> e308f3e6<span class="token operator">-</span><span class="token number">6</span>cac<span class="token operator">-</span><span class="token number">4</span>e85<span class="token operator">-</span>b4a1<span class="token operator">-</span><span class="token number">2</span>f53376dc53c

Logging initialized <span class="token keyword">using</span> configuration <span class="token operator">in</span> <span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties Async: <span class="token boolean">true</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> <span class="token number">2</span>b23427f<span class="token operator">-</span><span class="token number">3062</span><span class="token operator">-</span><span class="token number">4</span>ad0<span class="token operator">-</span>a6e4<span class="token operator">-</span><span class="token number">5</span>c51159af89d
OK
database_name
<span class="token keyword">default</span>
student
teaceher
<span class="token keyword">Time</span> taken: <span class="token number">3.745</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">3</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-3-hive-f"><a href="#3-3-hive-f" class="headerlink" title="3.3 hive -f"></a>3.3 hive -f</h3><hr>

<p>不用进入交互窗口，用<code>vim</code>或<code>vi</code>创建一个文件，写入一些sql命令，通过hive -f 即可执行。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># vim hive.sql</span>
<span class="token comment">## 文件中的内容</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token comment">## 以下是执行结果</span>
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># hive -f hive.sql</span>
which: <span class="token keyword">no</span> hbase <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>bin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>jre<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>bin:<span class="token operator">/</span>root<span class="token operator">/</span>bin<span class="token punctuation">)</span>
SLF4J: Class path <span class="token keyword">contains</span> multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.10</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span><span class="token keyword">share</span><span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.25</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: See http:<span class="token comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span>
SLF4J: Actual binding <span class="token operator">is</span> <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> <span class="token number">1</span>bf5a42e<span class="token operator">-</span>f5e7<span class="token operator">-</span><span class="token number">4</span>bd4<span class="token operator">-</span><span class="token number">87</span>cb<span class="token operator">-</span>a5d8aa719c62

Logging initialized <span class="token keyword">using</span> configuration <span class="token operator">in</span> <span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties Async: <span class="token boolean">true</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> <span class="token number">1</span>fe787c1<span class="token operator">-</span>bac7<span class="token operator">-</span><span class="token number">42</span>bf<span class="token operator">-</span><span class="token number">9</span>cb6<span class="token operator">-</span><span class="token number">2254</span>f95fab17
OK
database_name
<span class="token keyword">default</span>
student
teaceher
<span class="token keyword">Time</span> taken: <span class="token number">3.399</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">3</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-4-其他命令"><a href="#3-4-其他命令" class="headerlink" title="3.4 其他命令"></a>3.4 其他命令</h3><hr>

<ul>
<li>退出hive客户端命令（非beeline模式下）</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token keyword">exit</span><span class="token punctuation">;</span> 
hive<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>quit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>退出hive客户端命令（beeline模式下）</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token operator">!</span>quit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>通过客户端用命令行来查看HDFS的文件系统</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> dfs <span class="token operator">-</span>ls <span class="token operator">/</span><span class="token punctuation">;</span>
Found <span class="token number">4</span> items
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">20</span>:<span class="token number">09</span> <span class="token operator">/</span><span class="token keyword">data</span>
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span>:<span class="token number">53</span> <span class="token operator">/</span>hive
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">16</span>:<span class="token number">42</span> <span class="token operator">/</span>system
drwxrwxrwx   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">19</span>:<span class="token number">04</span> <span class="token operator">/</span>tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看本地的文件系统（即虚拟机上的文件系统）</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token operator">!</span> ls <span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token punctuation">;</span>
<span class="token keyword">data</span>
hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span>
hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span>
hive<span class="token punctuation">.</span><span class="token keyword">sql</span>
jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看历史记录(即hive客户端的操作记录)</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 必须进入主目录才行</span>
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># cat .hivehistory</span>
cat: <span class="token punctuation">.</span>hivehistory: 没有那个文件或目录
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># cd ~</span>
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># cat .hivehistory</span>
<span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
<span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>以上是Hive的一些简单命令，下一篇文章会介绍Hive的一些HQL语句，简单介绍HQL的DDL、DDL、DML、UDF 四种类型。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记二-面向对象</title>
    <url>/java-xue-xi-bi-ji-er-mian-xiang-dui-xiang.html</url>
    <content><![CDATA[<h3 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1.类和对象"></a>1.类和对象</h3><hr>

<ul>
<li>什么是对象？</li>
</ul>
<p>万物皆可对象，客观存在的事物皆为对象。水杯、手机、电脑、铅笔、汽车、飞机等只要是客观存在的事物都可以对象。</p>
<br>

<ul>
<li>什么是面向对象？</li>
</ul>
<p>面向对象的方法主要是把事物给对象化，包括其属性和行为。面向对象说到底就是一种思想，任何事物都可以看作</p>
<p>是一个对象。之前在知乎上看到过一篇有关面向对象和面向过程的介绍，比较通俗易懂。</p>
<p>文章链接：<a href="https://zhuanlan.zhihu.com/p/75265007">点我进入</a></p>
<br>

<ul>
<li>什么是类？</li>
</ul>
<p>类是对现实生活中一类具有共同属性和行为的事物的抽象。</p>
<br>

<p><strong>类的特点：</strong></p>
<ol>
<li><p>类是对象的数据类型。</p>
</li>
<li><p>类是具有相同属性和行为的一组对象的集合（也可以说一个类对应多个对象，只要这些对象的属性和行为是相同的）。</p>
<br></li>
</ol>
<ul>
<li>什么是对象属性？</li>
</ul>
<p><strong>属性：</strong>对象具有的各种特征，每个对象的每个属性都拥有特定的属性值，以人为例。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>身高</td>
<td>189cm</td>
</tr>
<tr>
<td>体重</td>
<td>135kg</td>
</tr>
<tr>
<td>性别</td>
<td>男</td>
</tr>
<tr>
<td>年龄</td>
<td>26</td>
</tr>
</tbody></table>
<br>

<ul>
<li>什么是对象的行为？</li>
</ul>
<p>行为：对象能执行的操作，还以人为例。</p>
<p>人可以吃饭、睡觉、学习、跑步等行为。</p>
<br>

<ul>
<li>类和对象的关系</li>
</ul>
<blockquote>
<p>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</p>
<p>对象：是能够看得到摸的着的真实存在的实体</p>
</blockquote>
<p>类是对象的抽象，对象是类的实体，比如下图。右边的对象实现了左边类里所有的属性与行为，左边的类是右边对象的抽象。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210331172808.png" style="zoom:67%;">

<br>

<h3 id="2-类的定义"><a href="#2-类的定义" class="headerlink" title="2.类的定义"></a>2.类的定义</h3><hr>

<p><strong>类的重要性</strong>：类是java程序最基本的组成单位</p>
<p><strong>类是什么：</strong>是对现实生活中一类具有共同属性和行为的事物的抽象，确定对象将会拥有属性和行为。</p>
<p><strong>类的组成：</strong>类是由属性和行为组成</p>
<ul>
<li><p>属性：在类中通过成员变量来体现。（类中方法外的变量）</p>
</li>
<li><p>行为：在类中通过成员方法来体现（即不带static关键字）</p>
</li>
</ul>
<p>注意：Java中就没有全局变量这个概念，只分为成员变量和局部变量，全局变量与成员变量基本没什么区别，全局变量是C语言中的叫法，但很多人在学Java时习惯把成员变量叫做全局变量。</p>
<br>

<p>类的定义步骤：</p>
<ol>
<li>定义类</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>

<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>编写类的成员变量</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>
<span class="token comment">//成员变量</span>
    数据类型 变量<span class="token number">1</span><span class="token punctuation">;</span>
    数据类型 变量<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>编写类的成员方法</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>
<span class="token comment">//成员变量</span>
    数据类型 变量<span class="token number">1</span><span class="token punctuation">;</span>
    数据类型 变量<span class="token number">2</span><span class="token punctuation">;</span>
  		……
 <span class="token comment">//成员方法</span>
    方法<span class="token number">1</span><span class="token punctuation">;</span>
    方法<span class="token number">2</span><span class="token punctuation">;</span>
   ……
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明成员变量</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">//public为修饰符，后面会有介绍，暂时不用关注</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>

    <span class="token comment">//声明成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"说话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="3-使用对象"><a href="#3-使用对象" class="headerlink" title="3.使用对象"></a>3.使用对象</h3><hr>

<p>使用对象之前，我们需要先创建一个对象。</p>
<p>创建对象的格式：<code>类名 对象名=new 类名();</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明成员变量</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">//public为修饰符，后面会有介绍，暂时不用关注</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>

    <span class="token comment">//声明成员方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"说话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建对象：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这里创建的对象就是Person类的实例化，此Person对象实例化了Person类中的所有的成员变量与成员方法，可以直接调用属性和方法。</span>
        <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对象的使用1：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> pname<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">int</span> page<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
        <span class="token class-name">String</span> psex<span class="token operator">=</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>
       <span class="token comment">//未对属性赋值，所以属性被调用后输出的是默认值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为null</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>psex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对象的使用2：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建对象</span>
        <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用Person的属性</span>
        p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"钉子君"</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> pname<span class="token operator">=</span>p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">int</span> page<span class="token operator">=</span>p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
        <span class="token class-name">String</span> psex<span class="token operator">=</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为钉子君</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为34</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>psex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为男</span>
        <span class="token comment">//调用Person中的方法</span>
        p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为跑步</span>
        p<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出为说话</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h3 id="4-成员变量与局部变量"><a href="#4-成员变量与局部变量" class="headerlink" title="4.成员变量与局部变量"></a>4.成员变量与局部变量</h3><br>

<p>成员变量：类中方法外的变量。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明成员变量</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>局部变量：方法中的变量</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">//声明成员变量</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> str<span class="token operator">=</span><span class="token string">"钉子君"</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>局部变量与成员变量的区别：</p>
<table>
<thead>
<tr>
<th>区别</th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody><tr>
<td>类中位置不同</td>
<td>类中方法外</td>
<td>类中方法内</td>
</tr>
<tr>
<td>内存中位置不同</td>
<td>对内存</td>
<td>栈内存</td>
</tr>
<tr>
<td>生命周期不同</td>
<td>随着对象的存在而存在，随对象消失而消失</td>
<td>随方法的调用而存在，方法调用完毕消失</td>
</tr>
<tr>
<td>初始化值不同</td>
<td>有默认的初始化值</td>
<td>无默认的初始化值，必须先定义赋值才能使用</td>
</tr>
</tbody></table>
<br>

<h3 id="5-封装"><a href="#5-封装" class="headerlink" title="5.封装"></a>5.封装</h3><hr>

<h4 id="5-1-private关键字"><a href="#5-1-private关键字" class="headerlink" title="5.1 private关键字"></a>5.1 private关键字</h4><ul>
<li>private是一个权限修饰符</li>
<li>可以修饰成员（成员变量和成员方法)</li>
<li>作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问</li>
</ul>
<blockquote>
<p>被private修饰的成员变量不能被别的类随意访问。针对private修饰的成员变量，如果需要被其他类使用，需</p>
<p>要提供相应的操作，public修饰的变量允许被其他类调用，所以不需要get(),set()方法</p>
</blockquote>
<ul>
<li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li>
<li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li>
</ul>
<br>

<p>实例：</p>
<p>Person类</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">//public修饰的成员变量可以被其他类调用</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">//private修饰的方法只能在本类中使用，其他类无法直接调用。</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">//如果想调用private修饰的变量可以通过get（）和set（）方法来获取和设置值,两个方法</span>
    <span class="token comment">//get()和set()方法都要用public修饰</span>
    <span class="token comment">//set()方法为private修饰的变量赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        age <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token comment">//set()方法获取private修饰的变量</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"钉子君"</span><span class="token punctuation">;</span>
      <span class="token comment">//通过调用setAge(实参)方法来为age传参</span>
      p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过调用getAge()方法来调用age属性值</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<p>为什么private修饰的成员变量要用get()，set()方法来设置和获取值？</p>
<p>原因：</p>
<blockquote>
<p>private修饰的变量表示我们不想让其他人随意调用这个变量，有时候需要对别人传过来的属性值加一限制，比如Person中的age变量代表的是人的年龄属性，如果调用者传入的值是上述代码中的-19，那么这个值显然是不符合常理的，所以我们有时需要对别人传入的变量值做限制，让变量的赋值更加规范。而我们刚好可以通过set方法，在传入变量值时对其加以判断，筛选掉不符合逻辑或不符合我们要求的值。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">//在set()方法中加入判断条件，如果年龄不在范围内，则输出错误信息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">||</span>a<span class="token operator">&gt;</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的年龄有误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            age <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="5-2-this关键字"><a href="#5-2-this关键字" class="headerlink" title="5.2 this关键字"></a>5.2 this关键字</h4><blockquote>
<p>this修饰的变量用于指代成员变量，方法形参如果与成员变量同名，不带this修饰的变量值得时形参而不是成员变量，用this修饰的变量为成员变量。</p>
</blockquote>
<p>什么时候用this关键字？</p>
<p>当局部变量与成员变量同名时，防止局部变量把成员变量因隐藏。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token comment">//成员变量与形参同名，用this关键字来指代成员变量，this后面跟的就是成员变量，赋值号后面的就是局部变量</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>this的内存原理</p>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210331200207.png"></p>
<br>

<h4 id="5-3-封装"><a href="#5-3-封装" class="headerlink" title="5.3 封装"></a>5.3 封装</h4><ul>
<li>封装概述：</li>
</ul>
<p>是面向对象三大特征之一(封装，继承，多态)，是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</p>
<ul>
<li>分装原则：</li>
</ul>
<p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的getXxox()/setXxx()方法</p>
<ul>
<li>封装好处：</li>
</ul>
<p>通过方法来控制成员变量的操作，提高了代码的安全性把代码用方法进行封，提高了代码的复用性</p>
<br>

<h4 id="5-4-构造方法"><a href="#5-4-构造方法" class="headerlink" title="5.4 构造方法"></a>5.4 构造方法</h4><p>构造方法概述：构造方法是一种特殊的方法。</p>
<p>构造方法作用：<strong>创建对象</strong></p>
<p>构造方法功能：完成对象数据的初始化</p>
<p>语法格式：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//如果没有参数的话，叫无参构造器</span>
	修饰符 类名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实例：</p>
<p>Person类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment">//一个类中可以同时有无参构造器和有参构造器</span>
<span class="token comment">//无参构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//有参构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
      <span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里相当于调用了无参构造函数</span>
      p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"钉子君"</span><span class="token punctuation">;</span>
      <span class="token comment">//通过调用setAge(实参)方法来为age传参</span>
      p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过调用getAge()方法来调用age属性值</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出结果</span>
<span class="token comment">/*
无参构造器
钉子君
-19
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="5-5-构造方法注意事项"><a href="#5-5-构造方法注意事项" class="headerlink" title="5.5 构造方法注意事项"></a>5.5 构造方法注意事项</h4><p>注意事项一：</p>
<p>如果Person类中程序员没有写构造方法，创建对象并调用时程序会不会报错？答案是：<strong>不会！</strong></p>
<p>下面的Person类中没有写构造函数，但程序运行时不会报错。原因是当一个类中没有给任何的构造方法，系统会默认给一个无参的构造函数。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<p>注意事项二：</p>
<p>如果在类中已经创建了一个有参构造器，而没有创建无参构造函数，则在创建对象时不能使用无参构造器，若想使用无参构造器同时使用有参构造器，必须同时创建有参构造器和无参构造器。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//有参构造器，使用时必须传参</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"钉子君"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Person类中只有一个有参构造器，如果像下面那样构建对象，则会报错</span>
       <span class="token comment">// Person p = new Person();</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>

<h4 id="5-6-标准类的制作"><a href="#5-6-标准类的制作" class="headerlink" title="5.6 标准类的制作"></a>5.6 标准类的制作</h4><p>成员变量</p>
<ul>
<li>使用private修饰</li>
</ul>
<p>构造方法</p>
<ul>
<li><p>提供一个无参构造方法</p>
</li>
<li><p>提供一个带多个参数的构造方法</p>
</li>
</ul>
<p>成员方法</p>
<ul>
<li>提供每一个成员变量对应的setXXX()/getXXX()</li>
<li>提供一个显示对象信息的show()</li>
</ul>
<p>创建对象并为其成员变量赋值的两种方式</p>
<ul>
<li><p>无参构造方法创建对象后使用setXxxx()赋值</p>
</li>
<li><p>使用带参构造方法直接创建带有属性值的对象</p>
</li>
</ul>
<p>实例：</p>
<p>Person类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token comment">//无参构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token comment">//有两个参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">//有一个参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zut<span class="token punctuation">.</span>nanyu</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//使用无参构造器</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"钉子君"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//有参构造器，必须传参</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"钉子君"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"钉子君"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>海豚听书-免费的听书软件</title>
    <url>/hai-tun-ting-shu-mian-fei-de-ting-shu-ruan-jian.html</url>
    <content><![CDATA[<p>最近迷上了听书，于是想找一款能够听书的软件，在网上找了好几个版本的某拉雅破姐特殊版本，无一例外都失效了。</p>
<p>不过好在在放弃之前又让小钉找到了一款非常棒的听书软件，软件完全免费，内置资源非常丰富，相声、小说、评书，你想听的几乎都能够搜到，家里有父母喜欢听书的也可以推荐给他们用。</p>
<h5 id="1-软件介绍"><a href="#1-软件介绍" class="headerlink" title="1.软件介绍"></a>1.软件介绍</h5><br>

<p>软件名称：<strong>海豚听书</strong></p>
<p>软件大小：12.8M</p>
<p>适用系统：安卓</p>
<p>下载地址：<strong>见文末</strong></p>
<p>软件安全无毒，可放心使用，下图是腾讯哈勃查毒和VirScan扫描结果。<br></p>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%872.png" alt="腾讯哈勃查毒"><br><br><img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%871.png" alt="VirScan查毒"><br></p>
<p>软件完全免费，打开即可使用，首页有许多热门推荐。</p>
<img src="C:/Users/21062/Desktop/2/图片8.png" style="zoom: 50%;">

<br>

<p>分类里有单田芳、刘兰芳、田连元等评书大师，还有戏曲、头条、童话、脱口秀、英语读物、恐怖惊悚小说、百家讲坛、广播剧等。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%877.png" style="zoom:50%;">

<br>

<p>还可以直接搜索想听的资源，点击即可直接播放，播放非常流畅，完全不卡顿。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%876.png" style="zoom: 50%;">

<br>

<p>播放时支持定时关闭、倍速、跳过片头片尾等。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%873.png" style="zoom:50%;">

<br>

<p>喜欢的资源还可以收藏和关注，以便下次方便观看。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%875.png" style="zoom:50%;">



<br>

<h5 id="2-软件下载"><a href="#2-软件下载" class="headerlink" title="2.软件下载"></a>2.软件下载</h5><br>

<p><a href="https://nanyu.lanzous.com/iRFYSn2hjzg">点我下载</a></p>
<center>欢迎关注微信公众号：钉子君</center>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/_export1615371698717.jpg.png" style="zoom:50%;">
]]></content>
      <categories>
        <category>好软推荐</category>
      </categories>
      <tags>
        <tag>安卓好软</tag>
      </tags>
  </entry>
  <entry>
    <title>2.Hive环境配置</title>
    <url>/hive-huan-jing-pei-zhi.html</url>
    <content><![CDATA[<p>Hive是基于Hadoop的一个数据仓库工具，因此Hive的安装前提必须是Hadoop能够正常运行。</p>
<h3 id="2-1-Hive安装模式"><a href="#2-1-Hive安装模式" class="headerlink" title="2.1 Hive安装模式"></a>2.1 Hive安装模式</h3><hr>

<blockquote>
<p>根据<strong>元数据</strong>的位置，将Hive的安装分为三个模式：<strong>内嵌模式、独立模式、远程模式</strong>（最复杂）</p>
</blockquote>
<h4 id="1-1-1-Hive内嵌安装模式"><a href="#1-1-1-Hive内嵌安装模式" class="headerlink" title="1.1.1 Hive内嵌安装模式"></a>1.1.1 Hive内嵌安装模式</h4><p>不需要额外安装元数据库，采用Hive默认的Derby数据库，这种模式的缺点是只允许有一个 Hive 会话连接。</p>
<h4 id="1-1-2-Hive独立安装模式"><a href="#1-1-2-Hive独立安装模式" class="headerlink" title="1.1.2 Hive独立安装模式"></a>1.1.2 Hive独立安装模式</h4><p>集群中一个节点即做服务端，同时也做客户端。在安装 Hive 的节点上安装一个 MySQL 服务端，同时将 <code>hive.metastore.local</code> 的值设置为 <code>true</code>，配置 MySQL 地址和用户名密码即可。</p>
<h4 id="1-1-3-Hive远程安装模式（√）"><a href="#1-1-3-Hive远程安装模式（√）" class="headerlink" title="1.1.3 Hive远程安装模式（√）"></a>1.1.3 Hive远程安装模式（√）</h4><p>将 Hive 服务端与元数据的存储地址分开，元数据直接存储在远程的数据库服务器上即可。</p>
<p>因此node01 安装 Hive 服务端，node02安装Hive客户端 ，node03 安装 MySQL，以此来实现 Hive 与元数据的解耦操作。</p>
<h3 id="2-2所需软件合集"><a href="#2-2所需软件合集" class="headerlink" title="2.2所需软件合集"></a>2.2所需软件合集</h3><hr>

<ul>
<li><p>Mysql:<a href="https://dev.mysql.com/downloads/mysql/">官网下载地址</a></p>
<p>下载版本如下：</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/11/28/81B76pTmIbGXAgC.png"></p>
<ul>
<li><p>Hive：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">官网下载地址</a></p>
<p>  下载版本如下</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/11/28/uv1aOwLxbdI6o3B.png"></p>
<h3 id="2-3-安装Mysql"><a href="#2-3-安装Mysql" class="headerlink" title="2.3 安装Mysql"></a>2.3 安装Mysql</h3><hr>

<h4 id="2-3-1-安装Mysql"><a href="#2-3-1-安装Mysql" class="headerlink" title="2.3.1 安装Mysql"></a>2.3.1 安装Mysql</h4><p>下载Mysql，在其中一台节点上安装就行（这里选择在node03上安装Mysql）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、先卸载node03上的数据库mariadb，不卸载会报错
[root@node03 ~]# rpm -qa | grep mariadb
mariadb-libs-5.5.65-1.el7.x86_64
[root@node03 ~]# rpm -e --nodeps mariadb-libs-5.5.65-1.el7.x86_64
## 2、安装 net-tools 工具，否则会报缺少依赖的错
[root@node03 ~]# yum -y install net-tools
## 3、安装 perl,否则会报缺少依赖的错误
[root@node03 ~]# yum -y install perl
## 4、上传Mysql压缩包到node03上
## 创建一个新的文件夹用于存放安装包
[root@node03 ~]# mkdir /opt/apps/Mysql
[root@node03 ~]# cd /opt/apps/
[root@node03 apps]# ls
Hadoop  Java  Mysql
## 上传Mysql压缩包到node03的/opt/SoftWare/Mysql目录中
[root@node03 ~]# cd /opt/SoftWare/Mysql
## 安装上传下载软件
[root@node03 Mysql]# yum -y install lrzsz
[root@node03 Mysql]# rz
[root@node03 Mysql]# ls
mysql-5.7.32-1.el7.x86_64.rpm-bundle.tar
## 5、解包（并非解压）
[root@node03 Mysql]# tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar 
mysql-community-client-5.7.32-1.el7.x86_64.rpm
mysql-community-common-5.7.32-1.el7.x86_64.rpm
mysql-community-devel-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-compat-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-devel-5.7.32-1.el7.x86_64.rpm
mysql-community-libs-5.7.32-1.el7.x86_64.rpm
mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm
mysql-community-server-5.7.32-1.el7.x86_64.rpm
mysql-community-test-5.7.32-1.el7.x86_64.rpm
## 开始安装，安装的顺序不能乱
[root@node03 Mysql]# rpm -ivh mysql-community-common-5.7.32-1.el7.x86_64.rpm
警告：mysql-community-common-5.7.32-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-common-5.7.32-1.e################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-libs-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-libs-5.7.32-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-libs-5.7.32-1.el7################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-libs-compat-5.7.3################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-client-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-client-5.7.32-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-client-5.7.32-1.e################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-server-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-server-5.7.32-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-server-5.7.32-1.e################################# [100%]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-2-启动Mysql服务"><a href="#2-3-2-启动Mysql服务" class="headerlink" title="2.3.2 启动Mysql服务"></a>2.3.2 启动Mysql服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、启动Mysql服务
[root@node03 Mysql]# systemctl start mysqld
## 2、查看Mysql状态
[root@node03 Mysql]# systemctl status mysqld
mysqld.service - MySQL Server
Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)
Active: active (running) since 六 2020-11-28 15:12:41 CST; 2min 0s ago
Docs: man:mysqld(8)
           http://dev.mysql.com/doc/refman/en/using-systemd.html
 Process: 1394 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)
 Process: 1345 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)
 Main PID: 1397 (mysqld)
   CGroup: /system.slice/mysqld.service
           └─1397 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid

11月 28 15:12:36 node03 systemd[1]: Starting MySQL Server...
11月 28 15:12:41 node03 systemd[1]: Started MySQL Server.
## 3、设置开机自启动
[root@node03 Mysql]# systemctl enable mysqld
## 4、删除安装包（节省空间）
[root@node03 Mysql]# ls
mysql-5.7.32-1.el7.x86_64.rpm-bundle.tar                 mysql-community-embedded-devel-5.7.32-1.el7.x86_64.rpm
mysql-community-client-5.7.32-1.el7.x86_64.rpm           mysql-community-libs-5.7.32-1.el7.x86_64.rpm
mysql-community-common-5.7.32-1.el7.x86_64.rpm           mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm
mysql-community-devel-5.7.32-1.el7.x86_64.rpm            mysql-community-server-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-5.7.32-1.el7.x86_64.rpm         mysql-community-test-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-compat-5.7.32-1.el7.x86_64.rpm
[root@node03 Mysql]# rm -rf mysql-*
[root@node03 Mysql]# ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-3-修改Root密码"><a href="#2-3-3-修改Root密码" class="headerlink" title="2.3.3 修改Root密码"></a>2.3.3 修改Root密码</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、 在日志文件中查看mysql的root用户默认密码
##    如下，默认密码为root@localhost:后面的内容，即：4uNuB5DdiX+X
[root@node03 Mysql]# grep 'temporary password' /var/log/mysqld.log
2020-11-28T07:12:38.953216Z 1 [Note] A temporary password is generated for root@localhost: 4uNuB5DdiX+X
## 2、取消密码检查策略s
##    修改/etc/my.cnf文件，在文件中添加以下内容以禁用密码策略
##    validate_password=off（必须手敲，不能拷贝，拷贝会报错）
[root@node03 Mysql]# vim /etc/my.cnf
## 3、重启Mysql服务
[root@node03 Mysql]# systemctl restart mysqld
## 4、进入mysql，并输入4uNuB5DdiX+X密码
[root@node03 Mysql]# mysql -uroot -p
Enter password: 4uNuB5DdiX+X
## 5、修改密码为123456
mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
Query OK, 0 rows affected (0.01 sec)
## 6、退出mysql的命令
mysql&gt; exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-3-3-1-为什么要禁用密码策略"><a href="#2-3-3-1-为什么要禁用密码策略" class="headerlink" title="2.3.3.1 为什么要禁用密码策略"></a>2.3.3.1 为什么要禁用密码策略</h5><p>mysql中的密码策略规定，密码不能太过于简单；必须要有大小写；长度必须符合规定等限制。如果没有取消密码策略检查，则在mysql5.7中必然会报错，让你修改密码。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 密码策略示意表
mysql&gt; show variables like '%password%';
+----------------------------------------+-----------------+
| Variable_name                          | Value           |
+----------------------------------------+-----------------+
| default_password_lifetime              | 0               |
| disconnect_on_expired_password         | ON              |
| log_builtin_as_identified_by_password  | OFF             |
| mysql_native_password_proxy_users      | OFF             |
| old_passwords                          | 0               |
| report_password                        |                 |
| sha256_password_auto_generate_rsa_keys | ON              |
| sha256_password_private_key_path       | private_key.pem |
| sha256_password_proxy_users            | OFF             |
| sha256_password_public_key_path        | public_key.pem  |
+----------------------------------------+-----------------+
10 rows in set (0.01 sec)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-4-修改数据库编码为UTF-8"><a href="#2-3-4-修改数据库编码为UTF-8" class="headerlink" title="2.3.4 修改数据库编码为UTF-8"></a>2.3.4 修改数据库编码为UTF-8</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 在/etc/my.cnf文件中的添加以下内容
character_set_server=utf8
init_connect='SET NAMES utf8'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-5-添加Root用户的登录权限"><a href="#2-3-5-添加Root用户的登录权限" class="headerlink" title="2.3.5 添加Root用户的登录权限"></a>2.3.5 添加Root用户的登录权限</h4><p>默认只允许 root 帐户在本地登录，如果要在其它机器上连接 MySQL，必须修改 root 允许远程连接，或者添加一个允许远程连接的帐户</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1. 进入mysql
[root@master SoftWare]# mysql -uroot -p123456
## 2. 修改root的远程访问权限
##    root代表用户名， %代表任何主机都可以访问， 123456为root访问的密码
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; 
## 3. flush privileges 刷新MySQL的系统权限，使其即时生效，否则就重启服务器
mysql&gt; FLUSH PRIVILEGES;
## 4. 退出
mysql&gt; exit;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-4-安装Hive"><a href="#2-4-安装Hive" class="headerlink" title="2.4 安装Hive"></a>2.4 安装Hive</h3><hr>

<h4 id="2-4-1-上传解压Hive压缩包配置环境变量"><a href="#2-4-1-上传解压Hive压缩包配置环境变量" class="headerlink" title="2.4.1 上传解压Hive压缩包配置环境变量"></a>2.4.1 上传解压Hive压缩包配置环境变量</h4><p>在node01和node02上都要执行一遍。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、创建新的目录用于存放Hive安装包
[root@node01 ~]# mkdir /opt/apps/Hive
[root@node01 ~]# cd /opt/apps
[root@node01 apps]# ls
Hadoop3.1.4  Hive  JDK1.8
## 2、上传Hive安装包到Hive文件中
[root@node01 Hive]# rz
## 3、解压Hive安装包
[root@node01 Hive]# ls
apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz
[root@node01 Hive]# tar -zxf apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz 
## 4、重命名文件，方便使用
[root@node01 Hive]# mv apache-hive-3.1.2-bin hive-3.1.2
[root@node01 Hive]# ls
apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz   hive-3.1.2
## 5、删除Hive安装包
[root@node01 Hive]# rm -rf apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz
[root@node01 Hive]# ls
 hive-3.1.2
## 6、配置环境变量
[root@node01 Hive]# cd hive-3.1.2/
[root@node01 hive-3.1.2]# pwd
/opt/apps/Hive/hive-3.1.2
## 编辑 profile 文件，添加以下环境变量内容
[root@node01 hive-2.3.6]# vim /etc/profile
## Hive 环境变量
##Hive
export HIVE_HOME=/opt/apps/Hive/hive-3.1.2
export PATH=$PATH:$HIVE_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-2-修改相关配置文件"><a href="#2-4-2-修改相关配置文件" class="headerlink" title="2.4.2 修改相关配置文件"></a>2.4.2 修改相关配置文件</h4><h5 id="2-4-2-1-Server端配置（node01）"><a href="#2-4-2-1-Server端配置（node01）" class="headerlink" title="2.4.2.1 Server端配置（node01）"></a>2.4.2.1 Server端配置（node01）</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 新建一个conf文件，在里面创建hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml配置文件，并添加一下内容
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># vim conf<span class="token operator">/</span>hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml

<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> standalone<span class="token operator">=</span><span class="token string">"no"</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">?</span>xml<span class="token operator">-</span>stylesheet <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">"text/xsl"</span> href<span class="token operator">=</span><span class="token string">"configuration.xsl"</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库连接地址，使用MySQL存储元数据信息<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionURL<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node03<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>metastore<span class="token operator">?</span>createDatabaseIfNotExist<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库驱动<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionDriverName<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库用户名<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionUserName<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>密码<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionPassword<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>HDFS路径，用于存储不同 map<span class="token operator">/</span>reduce 阶段的执行计划和这些阶段的中间输出结果。<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>local<span class="token punctuation">.</span>scratchdir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>hive<span class="token operator">/</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>HDFS路径，本地表的默认位置<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>warehouse<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive 查询日志所在的目录，如果该值为空，将不创建查询日志。<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>querylog<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive操作日志<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>server2<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>operation<span class="token punctuation">.</span>log<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：远程资源下载的临时目录<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>downloaded<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>resources<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> hiveserver2用户名 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>beeline<span class="token punctuation">.</span>hs2<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>user<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> hiveserver2密码 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>beeline<span class="token punctuation">.</span>hs2<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>password<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-4-2-2-Client端配置（node02）"><a href="#2-4-2-2-Client端配置（node02）" class="headerlink" title="2.4.2.2 Client端配置（node02）"></a>2.4.2.2 Client端配置（node02）</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 新建一个conf文件，在里面创建hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml配置文件，并添加一下内容
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># vi conf<span class="token operator">/</span>hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml

<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> standalone<span class="token operator">=</span><span class="token string">"no"</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">?</span>xml<span class="token operator">-</span>stylesheet <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">"text/xsl"</span> href<span class="token operator">=</span><span class="token string">"configuration.xsl"</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里配置的是否启用本地服务器连接Hive，这里我们是客户端和服务端分开的一个配置，所以这里设置为<span class="token boolean">false</span><span class="token punctuation">.</span>-<span class="token operator">-&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>local<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>HDFS路径，用于存储不同 map<span class="token operator">/</span>reduce 阶段的执行计划和这些阶段的中间输出结果。<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>local<span class="token punctuation">.</span>scratchdir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>hive<span class="token operator">/</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地表的默认位置<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>warehouse<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Hive连接到该URI请求远程元存储的元数据<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>uris<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span> 
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>thrift<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node01<span class="token operator">:</span><span class="token number">9083</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive 查询日志所在的目录，如果该值为空，将不创建查询日志。<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>querylog<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive操作日志<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>server2<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>operation<span class="token punctuation">.</span>log<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：远程资源下载的临时目录<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>downloaded<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>resources<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>显示当前所使用的数据库<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>print<span class="token punctuation">.</span>current<span class="token punctuation">.</span>db<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>显示表头<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hive<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>print<span class="token punctuation">.</span>header<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-3-添加Mysql驱动"><a href="#2-4-3-添加Mysql驱动" class="headerlink" title="2.4.3 添加Mysql驱动"></a>2.4.3 添加Mysql驱动</h4><p>服务端（node01）与客户端（node02）都需要将驱动jar包上传至lib目录下</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 上传驱动jar包到lib目录下
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># cd lib<span class="token operator">/</span>
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> lib<span class="token punctuation">]</span># rz <span class="token operator">-</span>E
rz waiting to <span class="token namespace">receive<span class="token punctuation">.</span></span>
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> lib<span class="token punctuation">]</span># ls mysql<span class="token operator">-</span><span class="token operator">*</span>
mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">-</span><span class="token number">5.1</span><span class="token number">.49</span><span class="token punctuation">.</span>jar  mysql<span class="token operator">-</span>metadata<span class="token operator">-</span>storage<span class="token operator">-</span><span class="token number">0.12</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-4-修改日志文件"><a href="#2-4-4-修改日志文件" class="headerlink" title="2.4.4 修改日志文件"></a>2.4.4 修改日志文件</h4><p>Hive 的 log 默认存放在 /tmp/root/hive.log目录下（当前用户名下），可以对其进行修改，两台节点均需要配置</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 重新复制一份log4j配置文件，从Hive <span class="token number">2.1</span><span class="token number">.0</span> 开始，使用的是log4j2。
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># cp conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>template conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># vi conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties
## 修改下面的内容
property<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>log<span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-5-格式化Hive"><a href="#2-4-5-格式化Hive" class="headerlink" title="2.4.5 格式化Hive"></a>2.4.5 格式化Hive</h4><p>先修改Hadoop的相关配置，否则会报错。</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## <span class="token number">1.</span> 修改 Hadoop 中的 core<span class="token operator">-</span>site<span class="token punctuation">.</span>xml 配置文件
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> Hive<span class="token punctuation">]</span># vi <span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>etc<span class="token operator">/</span>hadoop<span class="token operator">/</span>core<span class="token operator">-</span>site<span class="token punctuation">.</span>xml
## 添加以下内容
<span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hadoop<span class="token punctuation">.</span>proxyuser<span class="token punctuation">.</span>root<span class="token punctuation">.</span>groups<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>description<span class="token punctuation">&gt;</span></span>Allow the superuser oozie to <span class="token namespace">impersonate</span> any members of the group group1 and group2 <span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">&gt;</span></span>hadoop<span class="token punctuation">.</span>proxyuser<span class="token punctuation">.</span>root<span class="token punctuation">.</span>hosts<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>description<span class="token punctuation">&gt;</span></span>The superuser can connect only from host1 and host2 to <span class="token namespace">impersonate</span> a user<span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在node01上格式化Hive</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># schematool <span class="token operator">-</span>initSchema <span class="token operator">-</span>dbType mysql
SLF4J<span class="token operator">:</span> Class path contains multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>share<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.10</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> See http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>org<span class="token operator">/</span>codes<span class="token punctuation">.</span>html#multiple_bindings <span class="token keyword">for</span> an explanation<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Actual binding is of <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>
Metastore connection URL<span class="token operator">:</span>     jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node03<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>metastore<span class="token operator">?</span>createDatabaseIfNotExist<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span>
Metastore Connection Driver <span class="token operator">:</span>     com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
Metastore connection User<span class="token operator">:</span>     root
Starting metastore schema initialization to <span class="token number">2.3</span><span class="token number">.0</span>
Initialization script hive<span class="token operator">-</span>schema<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.0</span><span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>sql
Initialization script completed
schemaTool completed
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-6-启动Hive"><a href="#2-4-6-启动Hive" class="headerlink" title="2.4.6  启动Hive"></a>2.4.6  启动Hive</h4><p>两种方式区别</p>
<ul>
<li><p>方式一：只要是支持Jdbc的，都能连接（支持的是Jdbc协议）</p>
</li>
<li><p>方式二：必须使用hive客户端才能连接（支持的是thrift协议）</p>
</li>
</ul>
<p>先启动Hadoop集群</p>
<p>启动方法1</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1. 启动服务端  将启动时的结果输出到null中（扔掉） &amp;表示后台运行，在前台不显示
[root@node01 hive-3.1.2]# hiveserver2 &gt; /dev/null 2&gt;&amp;1 &amp;

## 2. 查询服务端进程 ID
[root@node01 hive-3.1.2]# ps -aux| grep hiveserver2
root      13931  1.0 11.1 2344932 431620 pts/0  Sl   00:10   0:16
## 3. 停止服务端【这里暂时不操作，关闭 Hive 的时候操作】
[root@node01 hive-3.1.2]# kill -9 13931
##4.先关闭Hadoop集群的安全模式
[root@node01 ~]# hdfs dfsadmin -safemode leave   //集群退出安全模式
Safe mode is OFF
## 5. 启动客户端
[root@node02 hive-3.1.2]# beeline -u jdbc:hive2://node01:10000 -n root -p 123456
0: jdbc:hive2://node01:10000&gt; show tables;
+-----------+
| tab_name  |
+-----------+ |
+-----------+
1 row selected (0.616 seconds)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动方法2</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1. 启动服务端
[root@node01 hive-2.3.6]# hive --service metastore &gt; /dev/null 2&gt;&amp;1 &amp;
## 2. 查看服务端进程 ID
[root@node01 hive-2.3.6]# ps -aux| grep metastore
root      14342  5.5  8.9 2297776 345508 pts/0  Sl   01:18   0:09
## 3. 杀死服务进程
[root@node01 hive-2.3.6]# kill -9 14342
## 4. 启动客户端
[root@node02 hive-2.3.6]# hive
hive (default)&gt; show tables;
OK
tab_name
student2
Time taken: 0.755 seconds, Fetched: 1 row(s)
hive (default)&gt; exit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动方法3</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## <span class="token number">1.</span> 启动服务端
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># hive <span class="token operator">--</span>service metastore <span class="token operator">&gt;</span> <span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span> <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span>
## <span class="token number">2.</span> 查看服务端进程 ID
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># ps <span class="token operator">-</span>aux<span class="token operator">|</span> grep metastore
root      <span class="token number">14342</span>  <span class="token number">5.5</span>  <span class="token number">8.9</span> <span class="token number">2297776</span> <span class="token number">345508</span> pts<span class="token operator">/</span><span class="token number">0</span>  Sl   <span class="token number">01</span><span class="token operator">:</span><span class="token number">18</span>   <span class="token number">0</span><span class="token operator">:</span><span class="token number">09</span>
## <span class="token number">3.</span> 杀死服务进程
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># kill <span class="token operator">-</span><span class="token number">9</span> <span class="token number">14342</span>
## <span class="token number">4.</span> 启动客户端（用的比较多的方法，因为可以写脚本）
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># hive <span class="token operator">-</span>e <span class="token string">"show tables;"</span>
which<span class="token operator">:</span> no hbase in <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>jre<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>jre<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>bin<span class="token punctuation">)</span>
SLF4J<span class="token operator">:</span> Class path contains multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>share<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.10</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> See http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>org<span class="token operator">/</span>codes<span class="token punctuation">.</span>html#multiple_bindings <span class="token keyword">for</span> an explanation<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Actual binding is of <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>

Logging initialized using configuration in file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties Async<span class="token operator">:</span> <span class="token boolean">true</span>
OK
tab_name
student2
Time taken<span class="token operator">:</span> <span class="token number">1.274</span> seconds<span class="token punctuation">,</span> Fetched<span class="token operator">:</span> <span class="token number">1</span> row<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记一-基础语法</title>
    <url>/java-xue-xi-bi-ji-yi-ji-chu-yu-fa.html</url>
    <content><![CDATA[<h3 id="1-Java跨平台原理"><a href="#1-Java跨平台原理" class="headerlink" title="1. Java跨平台原理"></a>1. Java跨平台原理</h3><hr>



<ul>
<li>什么是平台</li>
</ul>
<p>平台指的是操作系统平台，比如Windows、Linux、Mac</p>
<ul>
<li>什么是跨平台？</li>
</ul>
<p>Java程序可以在任意平台上运行</p>
<ul>
<li>跨平台原理</li>
</ul>
<p>不同国家的人之间交流需要翻译才能进行交流。</p>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328094722.png"></p>
<p>同理，Java程序在不同的操作系统上运行时也需要一个翻译，而这个翻译就是Java虚拟机（JVM：Java Virtua<br>Machine），以下简称JVM。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328095349.png" style="zoom:80%;">



<p>我们只需要针对不同的操作系统提供不同的JVM即可实现Java跨平台。在Win上运行Java程序时提供Win版的</p>
<p>JVM；在Mac上运行Java程序时提供Mac版的JVM；在Linux上运行Java程序时提供Linux版的JVM即可。</p>
<blockquote>
<p>总结：在需要运行Java应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机(JVM：Java Virtua<br>Machine)即可。</p>
</blockquote>
<br>

<h3 id="2-JRE和JDK"><a href="#2-JRE和JDK" class="headerlink" title="2.JRE和JDK"></a>2.JRE和JDK</h3><hr>

<h4 id="2-1-什么是JRE？"><a href="#2-1-什么是JRE？" class="headerlink" title="2.1 什么是JRE？"></a>2.1 什么是JRE？</h4><p>JRE：(Java Runtime Environment)是Java程序运行时环境，包含<strong>JVM</strong>和运行时所需的<strong>核心类库</strong>。我们想要运行一个Java程序，只需要安装JRE即可。</p>
<blockquote>
<p>上节说到JVM能保证Java跨平台运行，而JRE又包含JVM，所以我们只安装JRE也能保证Java跨平台运行</p>
</blockquote>
<br>

<h4 id="2-2-什么是JDK？"><a href="#2-2-什么是JDK？" class="headerlink" title="2.2 什么是JDK？"></a>2.2 什么是JDK？</h4><p>JDK：(Java Development Kit)，<strong>包含JRE</strong>和开发人员使用的<strong>开发工具</strong>。我们想开发一个全新的Java程序，必须要安装JDK。</p>
<p>开发工具：编译工具（javac.exe）、运行工具（java.exe）</p>
<blockquote>
<p> 实际开发时我们只需要JDK即可，因为它包含了JRE和开发工具。</p>
</blockquote>
<br>

<h4 id="2-3-关系图"><a href="#2-3-关系图" class="headerlink" title="2.3 关系图"></a>2.3 关系图</h4><img src="https://gitee.com/nanyu99/picgo/raw/master/image/jdk.png" style="zoom: 50%;">



<h3 id="3-JDK下载与安装"><a href="#3-JDK下载与安装" class="headerlink" title="3.JDK下载与安装"></a>3.JDK下载与安装</h3><hr>



<p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">官网下载</a></p>
<p><strong>注意：</strong>下载时要下载与自己电脑操作系统相对应的版本。</p>
<br>

<h3 id="4-常用DOS命令"><a href="#4-常用DOS命令" class="headerlink" title="4.常用DOS命令"></a>4.常用DOS命令</h3><hr>



<p>打开命令提示符窗口：</p>
<p>1.按下Win+R</p>
<p>2.在弹出框中输入cmd</p>
<p>3.敲回车或点确定</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328103722.png" style="zoom:50%;">



<br>

<p>常用命令</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>D:回车或者d:回车</td>
<td>切换到D盘</td>
</tr>
<tr>
<td>dir</td>
<td>查看当前路径下的所有内容</td>
</tr>
<tr>
<td>cd 目录</td>
<td>切换到指定目录 cd blog（按下Tab键可补齐目录）</td>
</tr>
<tr>
<td>cd ..</td>
<td>返回上级目录</td>
</tr>
<tr>
<td>cd blog\themes</td>
<td>切换到多级目录</td>
</tr>
<tr>
<td>cd \</td>
<td>返回到当前盘的根目录</td>
</tr>
<tr>
<td>cls</td>
<td>清屏</td>
</tr>
<tr>
<td>exit</td>
<td>退出命令提示符窗口</td>
</tr>
</tbody></table>
<br>

<h3 id="5-Path环境变量配置"><a href="#5-Path环境变量配置" class="headerlink" title="5.Path环境变量配置"></a>5.Path环境变量配置</h3><hr>

<h4 id="5-1-为什么配置环境变量"><a href="#5-1-为什么配置环境变量" class="headerlink" title="5.1 为什么配置环境变量"></a>5.1 为什么配置环境变量</h4><p>我们在开发Java程序时，需要用到JDK提供的开发工具，而这些工具在JDK的安装目录的bin目录下。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328105154.png" style="zoom: 50%;">



<br>

<p>如果不配置Java环境变量会怎么样？打开命令提示窗口，输入javac或java，然后回车就会会提示以下内容：</p>
<blockquote>
<p>‘javac’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p>
</blockquote>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328105527.png" style="zoom: 67%;">



<p>怎么才能正常使用javac或java命令？</p>
<p><strong>方法一：</strong></p>
<p>执行javac或java命令时，先切换到JDK的bin目录下，再执行命令</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/werqw.png" style="zoom: 50%;">



<p><strong>方法二：</strong></p>
<p>由于每次执行命令时都要切换到bin目录下，所有略显麻烦，在实际开发中也不方便，所以才有了一种一劳永逸的方法二，即配置环境变量。</p>
<br>

<h4 id="5-2-配置环境变量（JDK8为例）"><a href="#5-2-配置环境变量（JDK8为例）" class="headerlink" title="5.2 配置环境变量（JDK8为例）"></a>5.2 配置环境变量（JDK8为例）</h4><p>打开文件管理器，右键此电脑，选择属性。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/Snipaste_2021-03-28_11-39-02.png" style="zoom: 50%;">

<br>

<p>点击高级系统设置</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328114238.png" style="zoom: 50%;">



<br>

<p>点击环境变量</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328114407.png" style="zoom:50%;">



<br>

<p>找到系统变量，点击新建，会弹出窗口。</p>
<p>变量名：JAVA_HOME</p>
<p>变量值：JDK的安装路径</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328114647.png" style="zoom:50%;">



<br>

<p>在系统变量中找到Path，点击编辑</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328115000.png" style="zoom:50%;">



<br>

<p>点击新建，添加下图中两条变量，最后点击确定。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328115217.png" style="zoom:50%;">



<br>

<p>以上，Java环境变量已经配置完成，在任意目录下执行<code>javac</code>命令若如下图，则说明配置成功。</p>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328115813.png" style="zoom: 50%;">



<br>

<h3 id="6-第一个Java程序"><a href="#6-第一个Java程序" class="headerlink" title="6.第一个Java程序"></a>6.第一个Java程序</h3><hr>

<p>开发一个Java程序需要三个步骤：<font color="red">编写程序、编译程序、运行程序</font></p>
<blockquote>
<p>Java属于编译型语言，因此在运行Java程序之前需要先对Java源程序进行编译，编译成Java自己字节码文件，最后才能执行Java程序。</p>
</blockquote>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%87112.png" style="zoom: 50%;">



<br>



<p><strong>第一个Java程序：Hello World：</strong></p>
<p>1.新建文本文档，修改名为HelloWorld.java</p>
<p>2.用记事本打开HelloWorld.java文本，输入以下内容并保存</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.打开命令提示符窗口，进入到HelloWorld.java所在目录，使用以下命令先对java源程序进行编译</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">javac <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>编译完成后会在HelloWorld.java的同级目录下生成一个命名为java类名，后缀名为<code>.class</code>的文件HelloWorld.class，使用以下命令即可执行该字节码文件。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注意:java直接跟文件名，不能加后缀，加后缀会报错</span>
java <span class="token class-name">HelloWorld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210328121216.png" style="zoom:50%;">



<h3 id="7-常量、变量、数据类型"><a href="#7-常量、变量、数据类型" class="headerlink" title="7.常量、变量、数据类型"></a>7.常量、变量、数据类型</h3><hr>

<h4 id="7-1-注释"><a href="#7-1-注释" class="headerlink" title="7.1 注释"></a>7.1 注释</h4><ul>
<li><p>注释指在程序指定位置添加说明性信息</p>
</li>
<li><p>注释不参与程序运行，仅起到说明作用</p>
</li>
<li><p>注释分为：单行注释、多行注释、文档注释</p>
</li>
</ul>
<p><strong>单行注释</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这是单行注释，程序不会执行此行</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>多行注释</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">/*	这是多行注释
	程序不会执行我们
	我的注释范围比单行注释更广*/</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>文本注释</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
这是文档注释
**/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="7-2-关键字"><a href="#7-2-关键字" class="headerlink" title="7.2 关键字"></a>7.2 关键字</h4><p><strong>关键字描述：</strong>关键字就是被Java语言赋予了特殊含义的单词</p>
<p><strong>关键字的特点：</strong></p>
<ul>
<li><p>关键字的字母全部小写</p>
</li>
<li><p>常用的代码编辑器对关键词有特殊的颜色显示</p>
</li>
<li><p>关键字有50多个左右</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//该程序中的public、class、void都是最常见的关键字，后期会学到更多的关键字</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="7-3-常量"><a href="#7-3-常量" class="headerlink" title="7.3 常量"></a>7.3 常量</h4><p><strong>常量概述：</strong>在程序运行过程中，其值不可以再发生改变的量</p>
<p><strong>常量分类：</strong></p>
<table>
<thead>
<tr>
<th>常量类型</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>字符串常量</td>
<td>英文双引号括起来</td>
<td>“钉子君博客” ， “钉子君”</td>
</tr>
<tr>
<td>整数常量</td>
<td>整数包括正负</td>
<td>18，-18，0</td>
</tr>
<tr>
<td>小数常量</td>
<td>含有小数点的数字</td>
<td>1.5，10.0，10.00，-1.0，0.1</td>
</tr>
<tr>
<td>字符常量</td>
<td>用单引号括起来</td>
<td>‘A’，’0’，’我’</td>
</tr>
<tr>
<td>布尔常量</td>
<td>布尔值，表真假</td>
<td>只有两个值：true、false</td>
</tr>
<tr>
<td>空常量</td>
<td>一个特殊值：空值</td>
<td>null</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//字符串常量</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//整数常量</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//小数常量</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//字符常量</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//布尔常量</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//空常量</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="7-4-数据类型"><a href="#7-4-数据类型" class="headerlink" title="7.4 数据类型"></a>7.4 数据类型</h4><ul>
<li><strong>计算机的存储单元</strong></li>
</ul>
<p>计算机是可以用来存储数据的，但无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位(bit)”，又称之</p>
<p>为“比特位”，通常用小写的字母” b”表示。而计算机中最小的存储单元叫“字节(byte)”，通常用大写字</p>
<p>母”B”表示，字节由连续的8个位组成。</p>
<p>1B(字节) = 8bit</p>
<p>1KB = 1024B</p>
<p>1MB = 1024kB</p>
<p>1GB = 1024MB</p>
<p>1TB = 1024GB</p>
<ul>
<li><strong>数据类型</strong></li>
</ul>
<p>Java语言是强类型语言，对于每一种数据都给出了明确的数据类型，不同的数据类型也分配了不同的内存空间,所</p>
<p>以它们表示的数据大小也是不一样的。Java在声明变量时必须指明该变量的数据类型，但比如Python、</p>
<p>JavaScript就不许要指明数据类型。</p>
<blockquote>
<p>Java中的数据类型分为两大类分别是基本类型和引用类型，基本类型包含int，float，double，char，</p>
<p>boolean等八种类型，引用类型包含类，数组，接口三种类型。</p>
</blockquote>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/as.jpg" style="zoom:67%;">



<br>



<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
<th>占用字节</th>
<th>取值范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>整型，用于存储整数</td>
<td>4字节</td>
<td>-2147483648~2147483647</td>
<td>0</td>
</tr>
<tr>
<td>byte</td>
<td>Java中最小的数据类型</td>
<td>1字节</td>
<td>-128~127</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>2字节</td>
<td>-32768~32717</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>8字节</td>
<td>-2^63~2^63-1</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>浮点型，用于存储带小数点的数字</td>
<td>4字节</td>
<td></td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型，用于存储带有小数点的数字</td>
<td>8字节</td>
<td></td>
<td>0.0d</td>
</tr>
<tr>
<td>char</td>
<td>字符型，用于存储单个字符</td>
<td>2字节</td>
<td>0~65535</td>
<td>空</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔类型，用于判断真或假</td>
<td>1字节</td>
<td>true、false</td>
<td>false</td>
</tr>
</tbody></table>
<ul>
<li>数据类型之间的相互转换</li>
</ul>
<p>类型转换分为：自动类型转换和强制类型转换</p>
<p><strong>自动类型转换：</strong>将表示数值小的变量类型转换为表示数值类型大的数据类型，小数据类型转换为大数据类型可以自动转换。</p>
<p>表示数据范围从小到大图</p>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/%E5%9B%BE%E7%89%87sw1.png"></p>
<p>案例：10为int类型，但将它赋值给double类型的变量时，10就自动转换为了浮点型10.0</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">double</span> d<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为10.0</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>强制类型转换</strong>：将表示数值大的变量类型转换为表示数值类型小的数据类型，大数据类型转换为小数据类型需强制转换。</p>
<p>案例：10.0为double类型，但将它赋值给int类型时，需要强制转换才能转换成功</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10.0</span><span class="token punctuation">;</span><span class="token comment">//(目标数据类型)</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为10</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="7-6-变量"><a href="#7-6-变量" class="headerlink" title="7.6 变量"></a>7.6 变量</h4><p><strong>变量概述：</strong>在程序运行过程中，其值可以发生改变的量。从本质上来说，变量就是内存中的一小块区域</p>
<p><strong>变量定义：</strong> </p>
<p>格式：数据类型  变量名=变量值;</p>
<p>范例：<code>int num=10;</code></p>
<p><strong>使用变量：</strong> 取值和修改值</p>
<p>取值：变量名</p>
<p>范例：num</p>
<p>修改值：num=18;</p>
<p>变量使用的注意事项:</p>
<ul>
<li><p>变量名字不能重复</p>
</li>
<li><p>变量未赋值不能使用</p>
</li>
<li><p>long类型的变量定义的时为防止整数过大，后面要加L</p>
</li>
<li><p>float类型变量定义时，为防止类型不兼容，后面要加F</p>
</li>
</ul>
<br>

<h3 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8.运算符"></a>8.运算符</h3><hr>



<h4 id="8-1-算术运算符"><a href="#8-1-算术运算符" class="headerlink" title="8.1 算术运算符"></a>8.1 算术运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>加</td>
<td>+</td>
<td>1+2=3，’’1’+’’2’=’’12’’ ，’A’+10=75</td>
</tr>
<tr>
<td>减</td>
<td>-</td>
<td>2-1=1，1.5-1=0.5</td>
</tr>
<tr>
<td>乘</td>
<td>*</td>
<td>2*1=2，2.0 * 1=2.0</td>
</tr>
<tr>
<td>除</td>
<td>/</td>
<td>6/5=1，整数相除只能得到整数；6.0/5=1.2</td>
</tr>
<tr>
<td>取余</td>
<td>%</td>
<td>8%4=0，0是两个数相除的余数</td>
</tr>
</tbody></table>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">%</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意1：</strong></p>
<p>算术表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p>
<p>提升规则：</p>
<ul>
<li><p>byte类型，short类型和char类型将被提升到int类型</p>
</li>
<li><p>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型等级顺序: </p>
</li>
</ul>
<blockquote>
<p>byte,short,char →int → long → float  double</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     
		<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     
		<span class="token keyword">char</span> b<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>     
      <span class="token keyword">double</span> c<span class="token operator">=</span><span class="token number">10.1</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11 ,结果提升为int类型</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20.1 ,结果提升为double类型    </span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意2：</strong></p>
<p>字符也可以做+运算操作，并且字符也有数值。</p>
<p>详见：<a href="https://tool.oschina.net/commons?type=4">ASCII对照表</a></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">char</span> b<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span><span class="token comment">//对应ASCII值为65</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意3：</strong></p>
<p>字符串也可以做+运算操作。</p>
<p>字符串相加，结果直接拼接</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token class-name">String</span> b<span class="token operator">=</span><span class="token string">"钉子君"</span><span class="token punctuation">;</span>
     <span class="token class-name">String</span> c<span class="token operator">=</span><span class="token string">"牛哇牛哇"</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">6</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//钉子君11</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//钉子君牛哇牛哇</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//钉子君106</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>d<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16钉子君</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="8-2-赋值运算符"><a href="#8-2-赋值运算符" class="headerlink" title="8.2 赋值运算符"></a>8.2 赋值运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=10;将10赋值给a</td>
</tr>
<tr>
<td>+=</td>
<td>加后赋值</td>
<td>a+=1;等价于a=a+1;</td>
</tr>
<tr>
<td>-=</td>
<td>减后赋值</td>
<td>a-=1;等价于a=a-1;</td>
</tr>
<tr>
<td>*=</td>
<td>乘后赋值</td>
<td>a*=1;等价于a=a * 1;</td>
</tr>
<tr>
<td>/=</td>
<td>除后赋值</td>
<td>a/=1;等价于a=a/1;</td>
</tr>
<tr>
<td>%=</td>
<td>取余后赋值</td>
<td>a%=1;等价于a=a%1;</td>
</tr>
</tbody></table>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
     a<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
     a<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
     a<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>
     a<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
     a<span class="token operator">%=</span><span class="token number">3</span><span class="token punctuation">;</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="8-3-自增-减运算符"><a href="#8-3-自增-减运算符" class="headerlink" title="8.3 自增/减运算符"></a>8.3 自增/减运算符</h4><p>自增：自动加一</p>
<p>自减：自动减一</p>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token comment">//先输出a的值，再进行++操作</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
   <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token comment">//先进行++操作，再输出b的值</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
   <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token comment">//先输出c的值，再进行--操作</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
   <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token comment">//先进行--操作，再输出d的值</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">--</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="8-4-关系运算符"><a href="#8-4-关系运算符" class="headerlink" title="8.4 关系运算符"></a>8.4 关系运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>!=</td>
<td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;</td>
<td>a&gt;b，判断a是否大于b。成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;=</td>
<td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为falsea&lt;b</td>
</tr>
<tr>
<td>&lt;</td>
<td>判断a是否小于b，成立为true，不成立为falsea&lt;=b</td>
</tr>
<tr>
<td>&lt;=</td>
<td>判断a是否小于等于b，成立为true，不成立为false</td>
</tr>
</tbody></table>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str1<span class="token operator">=</span><span class="token string">"你好"</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2<span class="token operator">=</span><span class="token string">"你好"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="8-5-逻辑运算符"><a href="#8-5-逻辑运算符" class="headerlink" title="8.5 逻辑运算符"></a>8.5 逻辑运算符</h4><p>在数学中，一个数据x，大于3，小于6，我们可以这样来进行表示: 3&lt;x&lt;6。</p>
<p>但在Java中，不能直接写上面的表达式，需要把上面的式子先进行拆解，再进行合并。</p>
<ul>
<li>拆解：x&gt;3且x&lt;6</li>
<li>合并：x&gt;3&amp;&amp;x&lt;6</li>
</ul>
<p><strong>逻辑运算符</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>逻辑与</td>
<td>a&amp;b,a和b都是true，结果为true，否则为false</td>
</tr>
<tr>
<td>|</td>
<td>逻辑或</td>
<td>a|b,a和b都是false，结果为false，否则为true</td>
</tr>
<tr>
<td>^</td>
<td>逻辑异或</td>
<td>a^b，a和b结果不同为true，相同为false</td>
</tr>
<tr>
<td>！</td>
<td>逻辑非</td>
<td>!a，结果和a的结果正好相反</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>a<span class="token operator">&amp;</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>c<span class="token operator">|</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>c<span class="token operator">^</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false^true   true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>a<span class="token operator">^</span>c<span class="token operator">&gt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true^true    false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span>a<span class="token operator">^</span>c<span class="token operator">&lt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false^fasle  false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>a<span class="token operator">^</span>c<span class="token operator">&lt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true^fasle   true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>a<span class="token punctuation">)</span><span class="token operator">^</span>c<span class="token operator">&lt;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fasle^fasle   false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br>



<p><strong>短路逻辑运算符</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>短路与</td>
<td>作用和&amp;相同，但是有短路效果</td>
</tr>
<tr>
<td>||</td>
<td>短路或</td>
<td>作用和|相同，但是有短路或效果</td>
</tr>
</tbody></table>
<ul>
<li>逻辑与&amp;，无论左边真假，右边都要执行。</li>
</ul>
<p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假。右边不执行。</p>
<ul>
<li>逻辑或，无论左边真假，右边都要执行。</li>
</ul>
<p>短路或|l，如果左边为假，右边执行；如果左边为真，右边不执行.</p>
<blockquote>
<p>最常用的逻辑运算符：&amp;&amp;与||</p>
</blockquote>
<br>

<h4 id="8-6-三元运算符"><a href="#8-6-三元运算符" class="headerlink" title="8.6 三元运算符"></a>8.6 三元运算符</h4><p>格式：关系表达式？表达式1:表达式2</p>
<p>范例：a&gt;b?a:b</p>
<p>计算规则：先计算关系表达式的值，如果值为true，表达式1的值就是运算结果。如果值为false，表达式2的值就是运算结果。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment">//表达式成立则输出表达式1，表达式不成立输出表达式2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h3 id="9-分支语句"><a href="#9-分支语句" class="headerlink" title="9. 分支语句"></a>9. 分支语句</h3><hr>



<p>流程控制语句分类：</p>
<ul>
<li>顺序结构</li>
<li>分支结构（if，switch）</li>
<li>循环控制（for，while，do…while）</li>
</ul>
<br>

<h4 id="9-1-顺序结构"><a href="#9-1-顺序结构" class="headerlink" title="9.1 顺序结构"></a>9.1 顺序结构</h4><p>顺序结构是程序中最基本最简单的流程控制，它没有特定的语法结构，按照代码的先后顺序依次执行代码，程序中大部分代码都是这样执行的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是顺序结构案例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有特定的语法结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按照代码的先后顺序依次执行代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序中大部分代码都是这样执行的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="9-2-分支结构"><a href="#9-2-分支结构" class="headerlink" title="9.2 分支结构"></a>9.2 分支结构</h4><h5 id="9-2-1-if语句"><a href="#9-2-1-if语句" class="headerlink" title="9.2.1 if语句"></a>9.2.1 if语句</h5><p><strong>语法格式一：if</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
 语句体<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<ul>
<li><p>首先计算关系表达式的值</p>
</li>
<li><p>如果关系表达式的值为true就执行语句体</p>
</li>
<li><p>如果关系表达式的值为false就不执行语句体</p>
</li>
<li><p>继续执行后面的语句内容</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>语法格式二：if-else</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
 语句体<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
 语句体<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<ul>
<li><p>首先计算关系表达式1的值</p>
</li>
<li><p>如果关系表达式的值为true就执行语句体1</p>
</li>
<li><p>如果关系表达式的值为false就执行语句体2</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>语法格式三：if…else-if</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 语句体<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 语句体<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 语句体<span class="token number">3</span><span class="token punctuation">;</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 <span class="token punctuation">.</span>
 
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
语句体n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<ul>
<li><p>首先计算关系表达式1的值</p>
</li>
<li><p>如果关系表达式的值为true就执行语句体1</p>
</li>
<li><p>如果关系表达式1的值为false就执行表达式2</p>
</li>
<li><p>如果表达式2的值为true，则执行语句体2</p>
</li>
<li><p>如果表达式2的值为false，就执行表达式3</p>
</li>
<li><p>这样一直向下执行，如果所有表达式都不满足，则执行表达式n</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a小于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a大于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a等于b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>if…else-if 案例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入你的成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"太棒啦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"已经很不错啦！但还要继续努力哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"刚好及格，险过呀！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"别灰心，下次努努力，一定能及格的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h5 id="9-2-2-switch语句"><a href="#9-2-2-switch语句" class="headerlink" title="9.2.2 switch语句"></a>9.2.2 switch语句</h5><p><strong>语法格式：</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>
    语句体<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>
    语句体<span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> 值<span class="token number">3</span><span class="token operator">:</span>
    语句体<span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> 值<span class="token number">4</span><span class="token operator">:</span>
    语句体<span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
 <span class="token keyword">default</span><span class="token operator">:</span>
   语句体n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<ul>
<li><p>先计算表达式的值。</p>
</li>
<li><p>依次和case后面的值进行比较，如果有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</p>
</li>
<li><p>如果所有的case后面的值和表达式的值都不匹配，就会执行default里面的语句体，然后程序结束掉。</p>
</li>
</ul>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个1-5的整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的是1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的是2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的是3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的是4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的是5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你输入的数有问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果不加break，程序就不会跳出，会自动执行到代码的最底端。</p>
<br>

<h4 id="9-3-循环结构"><a href="#9-3-循环结构" class="headerlink" title="9.3 循环结构"></a>9.3 循环结构</h4><p>循环结构的组成：</p>
<ul>
<li><p>初始化语句:用于表示循环开启时的起始状态， 简单说就是循环开始的时候什么样</p>
</li>
<li><p>条件判断语句:用于表示循环反复执行的条件,简单说就是判断循环是否能-直执行 下去</p>
</li>
<li><p>循环体语句:用于表示循环反复执行的内容， 简单说就是循环反复执行的事情</p>
</li>
<li><p>条件控制语句:用于表示循环执行中每次变化的内容,简单说就是控制循环是否能执行下去</p>
</li>
</ul>
<p>循环结构对应的语法:</p>
<ul>
<li><p>初始化语句:这里可以是一 条或者多条语句,这些语句可以完成-些初始化操作</p>
</li>
<li><p>条件判断语句:这里使用一个结果值为boolean类型的表达式，这个表达式能决定是否执行循环体。例如: a&lt;3</p>
</li>
<li><p>循环体语句: .这里可以是任意语句,这些语句将反复执行</p>
</li>
<li><p>条件控制语句:这里通常是使用一条语句来改变变量的值， 从而达到控制循环是否继续向下执行的效果。常见<code>i+ +</code> ,<code>j--</code>这样的操作</p>
</li>
</ul>
<br>

<h5 id="9-3-1-for循环"><a href="#9-3-1-for循环" class="headerlink" title="9.3.1 for循环"></a>9.3.1 for循环</h5><p>语法结构：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化语句<span class="token punctuation">;</span>条件判断语句<span class="token punctuation">;</span>条件控制语句<span class="token punctuation">)</span><span class="token punctuation">{</span>
     循环体<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<p>1.执行初始化语句</p>
<p>2.执行条件判断语句，看其结果是true还是false，如果是false,循环结束，如果是true,继续执行</p>
<p>3.执行循环体语句</p>
<p>4.执行条件控制语句</p>
<p>5.回到2继续</p>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<br>

<h5 id="9-3-2-while循环"><a href="#9-3-2-while循环" class="headerlink" title="9.3.2 while循环"></a>9.3.2 while循环</h5><p>语法格式：</p>
<pre class="line-numbers language-none"><code class="language-none">while(条件判断语句){
循环体语句;
条件控制语句;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<p>1.执行初始化语句</p>
<p>2.执行条件判断语句，看其结果是true还是false，如果是false,循环结束，如果是true,继续执行</p>
<p>3.执行循环体语句</p>
<p>4.执行条件控制语句</p>
<p>5.回到2继续</p>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token operator">++</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h5 id="9-3-3-do…while循环"><a href="#9-3-3-do…while循环" class="headerlink" title="9.3.3 do…while循环"></a>9.3.3 do…while循环</h5><p>语法格式：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>
循坏体<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件控制语句<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>执行流程:</p>
<p>1.执行初始化语句</p>
<p>2.执行循环体语句</p>
<p>3.执行条件控制语句</p>
<p>4.执行条件判断语句，看其结果是true还是false，如果是false,循环结束，如果是true,继续执行</p>
<p>5.回到2继续</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><strong>三种循环的区别：</strong></li>
</ul>
<p>for循环和while循环先判断条件是否成立，然后决定是否执行循环体(先判断后执行)</p>
<p>do..while循环先执行一次循环体, 然后判断条件是否成立，是否继续执行循环体(先执行后判断)</p>
<ul>
<li><strong>while循环与for循环的区别：</strong></li>
</ul>
<p>条件控制语句所控制的自增变量,因为归属for循环的语法结构中,在for循环结束后， 就不能再次被访问到了</p>
<p>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后,该变量还可以续</p>
<p>使用</p>
<br>

<h4 id="9-4-4-跳转控制语句"><a href="#9-4-4-跳转控制语句" class="headerlink" title="9.4.4 跳转控制语句"></a>9.4.4 跳转控制语句</h4><p>Java中的循环控制语句有两种，分别是：<strong>continue</strong>与<strong>break</strong></p>
<p><strong>continue用法：</strong></p>
<p>用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//输出结果为：0，1，3，4</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>break</strong>：</p>
<p>用在循环中，基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//输出结果为：0，1,2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h3 id="10-数组"><a href="#10-数组" class="headerlink" title="10.数组"></a>10.数组</h3><hr>

<p><strong>数组概述：</strong></p>
<ul>
<li><p>一次性声明大量的用于存储数据的变量。</p>
</li>
<li><p>要存储大的数据通常是相同的数据类型，比如：考试成绩</p>
</li>
</ul>
<p><strong>什么是数组：</strong></p>
<p>数组（array）是一种用于存储多个相同数据类型的存储模型</p>
<p><strong>数组的定义格式：</strong></p>
<p>格式一（推荐使用）：</p>
<p>数据类型 [] 变量名:int [] arr</p>
<p>定义了一个int类型的数组，数组名为arr</p>
<p>格式二：</p>
<p>数据类型 变量名 []:int arr[]</p>
<p>定义了一个int类型的变量，变量名为数组arr</p>
<br>

<h4 id="10-1-数组初始化"><a href="#10-1-数组初始化" class="headerlink" title="10.1 数组初始化"></a>10.1 数组初始化</h4><p>数组中的元素必须需要先初始化才能使用。-</p>
<ul>
<li><strong>什么是初始化</strong></li>
</ul>
<p>初始化就是为数组中的数组元素分配内存空间，并为每个数组元素赋值。</p>
<ul>
<li><strong>动态初始化</strong></li>
</ul>
<p>动态初始化：初始化时只指定数组的长度，由系统为数组分配初始值。</p>
<p>格式：数据类型 [] 变量名=new 数据类型[数组长度]</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>int :数组的数据类型，也可以是String、double等</p>
<p>[]:说明这是一个数组</p>
<p>arr:数组的名称</p>
<p>new:关键字，为数组申请内存空间</p>
<p>5：数组长度，即数组中的元素个数。</p>
</blockquote>
<ul>
<li><strong>静态初始化</strong></li>
</ul>
<p>静态初始化：即在声明数组时，直接指明数组的元素。</p>
<p>格式：数据类型 [] 变量名=new 数据类型[元素1，元素2，元素3]</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="10-2-数组元素访问及遍历数组"><a href="#10-2-数组元素访问及遍历数组" class="headerlink" title="10.2 数组元素访问及遍历数组"></a>10.2 数组元素访问及遍历数组</h4><p>数组中元素的访问是通过数组名[索引]来实现的，所谓索引也叫下标就是给每一个数组元素分配一个从0开始的序号。</p>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下标从0开始，数组中1的下标为0，2的下标为1，3的下标为2，4的下标为3</span>
        <span class="token comment">//直接输出数组名字的话得到的是数组在堆空间中的内存地址</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
        <span class="token comment">//访问数组元素时就是通过下标来访问，比如访问数组中的元素2，元素2对应的下标为1，则</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//输出为2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>数组的遍历</p>
<p>数组的遍历就是通过循环，将数组中的所有元素全部打印出来，其中循环我们一般用for循环。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//数组的ength属性用来获取数组的长度</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="10-3-内存分配"><a href="#10-3-内存分配" class="headerlink" title="10.3 内存分配"></a>10.3 内存分配</h4><p>Java中的内存分配</p>
<blockquote>
<p>Java程序在运行时，需要在内存中分配空间。为了提高运算效率,就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方 式和内存管理方式。</p>
</blockquote>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210330195409.png"></p>
<p>其中粉红色的内存区域为<strong>栈内存</strong>：存储局部变量，定义在方法中的变量，例如: arr，变量使用完毕后立即消除</p>
<p>右侧蓝色部分为<strong>堆内存</strong>：存储new出来的内容(实体,对象)，数组在初始化时，会为存储空间添加默认值</p>
<p>整数: 0；浮点数: 0.0；布尔: false；字符:空字符；引用数据类型: null</p>
<p>每一个new出来的东西都有一个地址值使用完毕，会在垃圾回收器<strong>空闲时</strong>被回收</p>
<br>

<h4 id="10-4-数组常见两个问题"><a href="#10-4-数组常见两个问题" class="headerlink" title="10.4 数组常见两个问题"></a>10.4 数组常见两个问题</h4><ul>
<li>索引越界</li>
</ul>
<p>如果声明一个长度为3的数组，则它的索引只能是0，1，2，如果使用时索引大于2，则会运行时报错</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//索引越界</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//会报索引越界异常</span>
<span class="token comment">/*
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 4
	at Test1.main(Test1.java:6)
*/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>空指针异常</li>
</ul>
<p>访问的数组已经不再指向堆内存的数据，造成空指针异常</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//将数组值设为空</span>
        arr<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//会报空指针异常</span>
<span class="token comment">/*
Exception in thread "main" java.lang.NullPointerException
	at Test1.main(Test1.java:7)
	*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h3 id="11-方法"><a href="#11-方法" class="headerlink" title="11. 方法"></a>11. 方法</h3><hr>

<p>方法：方法是具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p>
<p>方法必须先创建再使用，该过程成为方法的定义，创建完方法之后需要调用才能执行方法。</p>
<br>

<h4 id="11-1-方法的定义与调用"><a href="#11-1-方法的定义与调用" class="headerlink" title="11.1 方法的定义与调用"></a>11.1 方法的定义与调用</h4><p>方法的定义：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>
<span class="token comment">//实例</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法的调用：</p>
<p>在调用方法之前，该方法必须被事先定义好的，如果没有定义而调用，则会报错。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//方法的调用，调用run（）方法</span>
        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//2.调用方法</span>
        <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//1.定义方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="11-2-带参数的方法"><a href="#11-2-带参数的方法" class="headerlink" title="11.2 带参数的方法"></a>11.2 带参数的方法</h4><p>形参与实参：</p>
<ul>
<li>形参：形参是定义方法时定义的参数，等同于变量定义格式</li>
<li>实参：方法定义时，实际传入的参数，等同于使用变量或常量</li>
</ul>
<p>带参数的方法的定义：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span>数据类型 参数<span class="token number">1</span><span class="token punctuation">,</span>数据类型 参数<span class="token number">2</span><span class="token punctuation">,</span>数据类型 参数<span class="token number">3</span>…<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//方法体</span>
    <span class="token punctuation">}</span>
<span class="token comment">//实例</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"在跑步"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>带参数的方法的调用：</p>
<p>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//方法的调用，调用run（）方法</span>
        <span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"南雨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//向getSum中传递的参数，必须与定义方法时设置的参数数据类型，和参数个数保持一致</span>
        <span class="token comment">//1，2，3为实参</span>
        <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">//a,b,c为形参</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="11-3-带返回值方法的定义与调用"><a href="#11-3-带返回值方法的定义与调用" class="headerlink" title="11.3 带返回值方法的定义与调用"></a>11.3 带返回值方法的定义与调用</h4><p>带返回值的方法的定义：</p>
<p>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 数据类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">{</span>
reutrn 数据类型<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token string">"南雨"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token class-name">True</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>带返回值方法的调用</p>
<p>格式一：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">方法名（参数）<span class="token punctuation">;</span>
<span class="token function">getboolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>格式二：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">数据类型 变量名<span class="token operator">=</span>方法名（参数）<span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> flag<span class="token operator">=</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>方法的返回值通常会使用变量接收,否则该返回值将无意义，所以更推荐用格式二来调用方法</p>
<p>实例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//向getSum中传递的参数，必须与定义方法时设置的参数数据类型，和参数个数保持一致</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token operator">-</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h4 id="11-4-有关方法注意事项"><a href="#11-4-有关方法注意事项" class="headerlink" title="11.4 有关方法注意事项"></a>11.4 有关方法注意事项</h4><ul>
<li><p>方法与方法之间不能嵌套定义，只能一个方法定义另一个方法。</p>
</li>
<li><p>void关键字表示无返回值，课省略return，也可以单独写return，但return后面不加数据。</p>
</li>
</ul>
<br>

<h4 id="11-5-方法重载"><a href="#11-5-方法重载" class="headerlink" title="11.5 方法重载"></a>11.5 方法重载</h4><p><strong>重载概述：</strong></p>
<p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p>
<ul>
<li><p>多个方法在同一个类中</p>
</li>
<li><p>多个方法具有相同的方法名</p>
</li>
<li><p>多个方法的参数不相同，类型不同或者数量不同</p>
</li>
</ul>
<p><strong>重载特点：</strong></p>
<ul>
<li><p>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</p>
</li>
<li><p>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，不能通过返回值来判定两个方法是否相互构成重载</p>
</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//向getSum中传递的参数，必须与定义方法时设置的参数数据类型，和参数个数保持一致</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token operator">-</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum2<span class="token operator">=</span><span class="token operator">-</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> sum1<span class="token operator">=</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">,</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> n<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<br>

<h3 id="12-DeBug"><a href="#12-DeBug" class="headerlink" title="12.DeBug"></a>12.DeBug</h3><hr>

<p><strong><font color="red">debug：</font></strong></p>
<p>是供程序员使用的程序调试工具，它可以用于<strong>查看程序的执行流程</strong>，也可以<strong>用于追踪程序执行过程来调试程序。</strong></p>
<p><strong>debug操作流程：</strong></p>
<p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉我们从哪里开始查看。具体操作流程：如何加断点、如何运行加了断点的程序、看哪里、点哪里、如何删除断点</p>
<ul>
<li>加断点</li>
</ul>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210330232934.png"></p>
<ul>
<li>运行加了断点的程序</li>
</ul>
<img src="https://gitee.com/nanyu99/picgo/raw/master/image/Snipaste_2021-03-30_23-36-27.png" style="zoom: 67%;">



<ul>
<li>观察debug窗口</li>
</ul>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210330233826.png"></p>
<ul>
<li>观察console窗口，观察运行结果</li>
</ul>
<p><img src="https://gitee.com/nanyu99/picgo/raw/master/image/QQ%E6%88%AA%E5%9B%BE20210330233941.png"></p>
<ul>
<li>点F7键可向下执行代码，再次点击断点处可删除断点。</li>
</ul>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
