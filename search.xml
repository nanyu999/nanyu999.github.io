<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.Hive入门</title>
    <url>/2021/03/02/1.Hive%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1-1-Hive-是什么"><a href="#1-1-Hive-是什么" class="headerlink" title="1.1 Hive 是什么"></a>1.1 Hive 是什么</h3><hr>

<p>Hive是领英公司开发，是基于Hadoop的一个开源**<font color=red>数据仓库</font><strong>工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行，需要注意的是，</strong>Hive它并不是数据库。**</p>
<blockquote>
<p><strong>数据仓库：</strong>数据仓库注重存储、查询数据（并不注重对数据的查删改等操作）</p>
<p> <strong>数据库：</strong>数据库注重管理数据，比如对数据的增删改查等操作。</p>
<p>**Mysql\Oracle:**数据库管理软件。</p>
</blockquote>
<p>Hive 提供了一系列的工具，可以用来进行数据的提取、转换和加载【ETL】，是一种可以<strong>存储</strong>、<strong>查询</strong>和分析存储在 Hadoop中的大规模数据的架构体系。</p>
<h3 id="1-2-为什么要有Hive"><a href="#1-2-为什么要有Hive" class="headerlink" title="1.2 为什么要有Hive"></a>1.2 为什么要有Hive</h3><hr>
Hive 简化了 MapReduce 的开发难度，只要会 SQL，不需要去实现底层Map Reduce代码，就能快速的上手 Hive，通过简单的 SQL 语句就能实现复杂的 MapReduce 所能达到的功能。（通过简单的Sql语句，即可实现MapReduce大多数功能）



<h3 id="1-3-Hive的优点"><a href="#1-3-Hive的优点" class="headerlink" title="1.3 Hive的优点"></a>1.3 Hive的优点</h3><hr>

<ul>
<li><p>简单容易上手操作接口采用类 SQL 语法，提供快速开发的能力。</p>
</li>
<li><p>学习成本低避免了去写MapReduce，减少开发人员的学习成本。</p>
</li>
<li><p>可扩展Hive 可以自由扩展集群规模，一般情况下不需要重启服务</p>
</li>
<li><p>延展性Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数</p>
</li>
<li><p>容错性良好的容错性，即使节点出现问题 SQL 仍能够正常完成</p>
</li>
</ul>
<h3 id="1-4-Hive的缺点"><a href="#1-4-Hive的缺点" class="headerlink" title="1.4 Hive的缺点"></a>1.4 Hive的缺点</h3><hr>

<ul>
<li><p>Hive 的 HQL 表达能力有限迭代式算法无法表达，比如 pagerank 。数据挖掘方面，比如 k-means .</p>
</li>
<li><p>Hive 的效率比较低Hive 自动生成的 MapReduce 作业，通常情况下不够智能化</p>
</li>
<li><p>Hive 调优比较困难，粒度较粗</p>
</li>
<li><p>Hive 可控性差</p>
</li>
</ul>
<h3 id="1-5-Hive与传统数据库的比较"><a href="#1-5-Hive与传统数据库的比较" class="headerlink" title="1.5 Hive与传统数据库的比较"></a>1.5 Hive与传统数据库的比较</h3><hr>
<br>
<table><thead><tr><th>项目</th> <th>Hive</th> <th>传统数据库</th></tr></thead> <tbody><tr><td>查询语言</td> <td>HiveQL</td> <td>SQL</td></tr> <tr><td>存储</td> <td>HDFS【理论上无限存储】</td> <td>存储有限，随着容量增加，计算速度急剧下降</td></tr> <tr><td>执行引擎</td> <td>依赖于 MR/Spark框架，无法进行良好的性能优化</td> <td>可以选择更加有效的算法执行查询，以此提高执行效率</td></tr> <tr><td>灵活性</td> <td>元数据独立存储，数据存储在HDFS上，耦合度降低</td> <td>数据用途单一，耦合度高</td></tr> <tr><td>执行效率</td> <td>在大数据情况下，执行效率远远高于传统数据库</td> <td>在少量数据情况下，比较快</td></tr> <tr><td>延迟性</td> <td>高</td> <td>低</td></tr> <tr><td>数据加载模式</td> <td>读时模式</td> <td>写时模式</td></tr> <tr><td>数据操作</td> <td>数据覆盖追加</td> <td>行级更新删除</td></tr> <tr><td>索引</td> <td>0.7.0版本后加入，索引比较简单</td> <td>复杂索引</td></tr> <tr><td>事务</td> <td>支持，只能对数据库和表设置锁</td> <td>完全支持，具备完善的事务机制</td></tr> <tr><td>可靠性</td> <td>借助于 HDFS 数据有备份</td> <td>需要设置数据库的热备，以防止丢失</td></tr> <tr><td>基本环境</td> <td></td> <td></td></tr> <tr><td>应用场景</td> <td>大规模数据分析查询</td> <td>小规模数据的实时查询</td></tr> <tr><td>费用</td> <td>开源，免费</td> <td>商业应用，收费较高</td></tr></tbody></table>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hive编程</tag>
      </tags>
  </entry>
  <entry>
    <title>1.计算机基础部分</title>
    <url>/2021/03/02/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h3 id="1-1-计算机基础"><a href="#1-1-计算机基础" class="headerlink" title="1.1 计算机基础"></a>1.1 计算机基础</h3><hr>

<p>计算机可分为硬件、软件两种。其中硬件是看得见摸得着的，比如键盘、鼠标、硬盘等。软件是摸不着的，比如系统软件、应用软件。</p>
<p>系统软件包括：Windows、Linux、IOS</p>
<p>应用软件包括：QQ、微信、谷歌浏览器、英雄联盟等。</p>
<p>其中软件是在硬件的基础上运行的。</p>
<img src="https://i.loli.net/2020/12/15/c7uE8QnpJWoizlk.jpg" style="zoom: 50%;" />



<p><strong>程序在电脑上的运行过程:</strong></p>
<ul>
<li><p>当打开某个文件时，CPU不会直接从硬盘中取文件，而是先从硬盘中加载程序的代码到内存中去。</p>
</li>
<li><p>CPU执行内存中的代码。</p>
</li>
</ul>
<p><strong>电脑这样做的原因:</strong><br>CPU读取数据是非常快的，而硬盘的速度则非常慢，如果只从硬盘中读取数据的话，会大大浪费CPU的性能，因此CPU选择读取速度更快的内存。 </p>
<h3 id="2-2-计算机语言"><a href="#2-2-计算机语言" class="headerlink" title="2.2 计算机语言"></a>2.2 计算机语言</h3><hr>

<p>计算机语言可以分为三种:<strong>机器语言、汇编语言、高级语言。</strong></p>
<ul>
<li><p><strong>机器语言</strong>:计算机能最终执行的，它是由0、1组成的二进制数，二进制是计算机的基础。</p>
</li>
<li><p><strong>汇编语言</strong>:汇编语言本质上与机器语言相同，都是直接对硬件进行操作，只不过汇编语言的指令采用了特殊的英语缩写标识，更容易被记忆和识别。</p>
</li>
<li><p><strong>高级语言</strong>:主要相对于低级需要来说的，他不是一种具体的语言，而是由许多编程语言组成，比如java、c、go语言、javascript、python等。</p>
</li>
</ul>
<p>高级语言相对来说更适合人类编写，但计算机所能够识别的语言只有0、1构成的机器语言，因此计算机不能直接识别人类所编写的高级语言。这时就需要一种中间物体，能够将人类所写的高级语言转换为计算机所能识别的机器语言，这个中间物体就是**<font color=red>解释器</font>**，比如java所依赖的JVM上就有java解释器</p>
<p><strong>编程语言与标记语言的区别：</strong></p>
<ul>
<li>编程语言:有很强的逻辑性，是主动的，比如在编程语言里会有大量的if else ,for ,while等。</li>
<li>标记语言(Html):不用于向计算机发出指令，常用于格式化和链接，标记语言的存在是被读取的，是被动的。 </li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS入门</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2021/03/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>你好呀</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>随便说说啦</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>再见</p>
]]></content>
  </entry>
  <entry>
    <title>2.Hive环境配置</title>
    <url>/2021/03/02/2.Hive%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Hive是基于Hadoop的一个数据仓库工具，因此Hive的安装前提必须是Hadoop能够正常运行。</p>
<h3 id="2-1-Hive安装模式"><a href="#2-1-Hive安装模式" class="headerlink" title="2.1 Hive安装模式"></a>2.1 Hive安装模式</h3><hr>

<blockquote>
<p>根据<strong>元数据</strong>的位置，将Hive的安装分为三个模式：<strong>内嵌模式、独立模式、远程模式</strong>（最复杂）</p>
</blockquote>
<h4 id="1-1-1-Hive内嵌安装模式"><a href="#1-1-1-Hive内嵌安装模式" class="headerlink" title="1.1.1 Hive内嵌安装模式"></a>1.1.1 Hive内嵌安装模式</h4><p>不需要额外安装元数据库，采用Hive默认的Derby数据库，但这种模式有极大的缺陷就在于只允许一个 Hive 会话连接。</p>
<h4 id="1-1-2-Hive独立安装模式"><a href="#1-1-2-Hive独立安装模式" class="headerlink" title="1.1.2 Hive独立安装模式"></a>1.1.2 Hive独立安装模式</h4><p>一个节点即做服务端，也做客户端。在安装 Hive 的节点上安装一个 MySQL 服务端，并且将 <code>hive.metastore.local</code> 设置为 <code>true</code>，配置 MySQL 地址和用户名密码即可。</p>
<h4 id="1-1-3-Hive远程安装模式（√）"><a href="#1-1-3-Hive远程安装模式（√）" class="headerlink" title="1.1.3 Hive远程安装模式（√）"></a>1.1.3 Hive远程安装模式（√）</h4><p>将 Hive 服务端与元数据的存储地址分开，元数据直接存储在远程的数据库服务器上即可。</p>
<p>因此node01 安装 Hive 服务端，node02安装Hive客户端 ，node03 安装 MySQL，以此来实现 Hive 与元数据的解耦操作。</p>
<h3 id="2-2所需软件合集"><a href="#2-2所需软件合集" class="headerlink" title="2.2所需软件合集"></a>2.2所需软件合集</h3><hr>

<ul>
<li><p>Mysql:<a href="https://dev.mysql.com/downloads/mysql/">官网下载地址</a></p>
<p>下载版本如下：</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/11/28/81B76pTmIbGXAgC.png" alt="下载版本"></p>
<ul>
<li>Hive：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">官网下载地址</a></li>
</ul>
<p>​        下载版本如下</p>
<p><img src="https://i.loli.net/2020/11/28/uv1aOwLxbdI6o3B.png" alt="下载版本"></p>
<h3 id="2-3-安装Mysql"><a href="#2-3-安装Mysql" class="headerlink" title="2.3 安装Mysql"></a>2.3 安装Mysql</h3><hr>

<h4 id="2-3-1-安装Mysql"><a href="#2-3-1-安装Mysql" class="headerlink" title="2.3.1 安装Mysql"></a>2.3.1 安装Mysql</h4><p>下载Mysql，在其中一台节点上安装就行（这里选择在node03上安装Mysql）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、先卸载node03上的数据库mariadb，不卸载会报错
[root@node03 ~]# rpm -qa | grep mariadb
mariadb-libs-5.5.65-1.el7.x86_64
[root@node03 ~]# rpm -e --nodeps mariadb-libs-5.5.65-1.el7.x86_64
## 2、安装 net-tools 工具，否则会报缺少依赖的错
[root@node03 ~]# yum -y install net-tools
## 3、安装 perl,否则会报缺少依赖的错误
[root@node03 ~]# yum -y install perl
## 4、上传Mysql压缩包到node03上
## 创建一个新的文件夹用于存放安装包
[root@node03 ~]# mkdir &#x2F;opt&#x2F;apps&#x2F;Mysql
[root@node03 ~]# cd &#x2F;opt&#x2F;apps&#x2F;
[root@node03 apps]# ls
Hadoop  Java  Mysql
## 上传Mysql压缩包到node03的&#x2F;opt&#x2F;SoftWare&#x2F;Mysql目录中
[root@node03 ~]# cd &#x2F;opt&#x2F;SoftWare&#x2F;Mysql
## 安装上传下载软件
[root@node03 Mysql]# yum -y install lrzsz
[root@node03 Mysql]# rz
[root@node03 Mysql]# ls
mysql-5.7.32-1.el7.x86_64.rpm-bundle.tar
## 5、解包（并非解压）
[root@node03 Mysql]# tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar 
mysql-community-client-5.7.32-1.el7.x86_64.rpm
mysql-community-common-5.7.32-1.el7.x86_64.rpm
mysql-community-devel-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-compat-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-devel-5.7.32-1.el7.x86_64.rpm
mysql-community-libs-5.7.32-1.el7.x86_64.rpm
mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm
mysql-community-server-5.7.32-1.el7.x86_64.rpm
mysql-community-test-5.7.32-1.el7.x86_64.rpm
## 开始安装，安装的顺序不能乱
[root@node03 Mysql]# rpm -ivh mysql-community-common-5.7.32-1.el7.x86_64.rpm
警告：mysql-community-common-5.7.32-1.el7.x86_64.rpm: 头V3 DSA&#x2F;SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级&#x2F;安装...
   1:mysql-community-common-5.7.32-1.e################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-libs-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-libs-5.7.32-1.el7.x86_64.rpm: 头V3 DSA&#x2F;SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级&#x2F;安装...
   1:mysql-community-libs-5.7.32-1.el7################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm: 头V3 DSA&#x2F;SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级&#x2F;安装...
   1:mysql-community-libs-compat-5.7.3################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-client-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-client-5.7.32-1.el7.x86_64.rpm: 头V3 DSA&#x2F;SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级&#x2F;安装...
   1:mysql-community-client-5.7.32-1.e################################# [100%]
[root@node03 Mysql]# rpm -ivh mysql-community-server-5.7.32-1.el7.x86_64.rpm 
警告：mysql-community-server-5.7.32-1.el7.x86_64.rpm: 头V3 DSA&#x2F;SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级&#x2F;安装...
   1:mysql-community-server-5.7.32-1.e################################# [100%]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-2-启动Mysql服务"><a href="#2-3-2-启动Mysql服务" class="headerlink" title="2.3.2 启动Mysql服务"></a>2.3.2 启动Mysql服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、启动Mysql服务
[root@node03 Mysql]# systemctl start mysqld
## 2、查看Mysql状态
[root@node03 Mysql]# systemctl status mysqld
● mysqld.service - MySQL Server
   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; enabled; vendor preset: disabled)
   Active: active (running) since 六 2020-11-28 15:12:41 CST; 2min 0s ago
     Docs: man:mysqld(8)
           http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html
  Process: 1394 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid $MYSQLD_OPTS (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)
  Process: 1345 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqld_pre_systemd (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)
 Main PID: 1397 (mysqld)
   CGroup: &#x2F;system.slice&#x2F;mysqld.service
           └─1397 &#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid

11月 28 15:12:36 node03 systemd[1]: Starting MySQL Server...
11月 28 15:12:41 node03 systemd[1]: Started MySQL Server.
## 3、设置开机自启动
[root@node03 Mysql]# systemctl enable mysqld
## 4、删除安装包（节省空间）
[root@node03 Mysql]# ls
mysql-5.7.32-1.el7.x86_64.rpm-bundle.tar                 mysql-community-embedded-devel-5.7.32-1.el7.x86_64.rpm
mysql-community-client-5.7.32-1.el7.x86_64.rpm           mysql-community-libs-5.7.32-1.el7.x86_64.rpm
mysql-community-common-5.7.32-1.el7.x86_64.rpm           mysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm
mysql-community-devel-5.7.32-1.el7.x86_64.rpm            mysql-community-server-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-5.7.32-1.el7.x86_64.rpm         mysql-community-test-5.7.32-1.el7.x86_64.rpm
mysql-community-embedded-compat-5.7.32-1.el7.x86_64.rpm
[root@node03 Mysql]# rm -rf mysql-*
[root@node03 Mysql]# ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-3-修改Root密码"><a href="#2-3-3-修改Root密码" class="headerlink" title="2.3.3 修改Root密码"></a>2.3.3 修改Root密码</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、 在日志文件中查看mysql的root用户默认密码
##    如下，默认密码为root@localhost:后面的内容，即：4uNuB5DdiX+X
[root@node03 Mysql]# grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log
2020-11-28T07:12:38.953216Z 1 [Note] A temporary password is generated for root@localhost: 4uNuB5DdiX+X
## 2、取消密码检查策略s
##    修改&#x2F;etc&#x2F;my.cnf文件，在文件中添加以下内容以禁用密码策略
##    validate_password&#x3D;off（必须手敲，不能拷贝，拷贝会报错）
[root@node03 Mysql]# vim &#x2F;etc&#x2F;my.cnf
## 3、重启Mysql服务
[root@node03 Mysql]# systemctl restart mysqld
## 4、进入mysql，并输入4uNuB5DdiX+X密码
[root@node03 Mysql]# mysql -uroot -p
Enter password: 4uNuB5DdiX+X
## 5、修改密码为123456
mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;
Query OK, 0 rows affected (0.01 sec)
## 6、退出mysql的命令
mysql&gt; exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-3-3-1-为什么要禁用密码策略"><a href="#2-3-3-1-为什么要禁用密码策略" class="headerlink" title="2.3.3.1 为什么要禁用密码策略"></a>2.3.3.1 为什么要禁用密码策略</h5><p>mysql中的密码策略规定，密码不能太过于简单；必须要有大小写；长度必须符合规定等限制。如果没有取消密码策略检查，则在mysql5.7中必然会报错，让你修改密码。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 密码策略示意表
mysql&gt; show variables like &#39;%password%&#39;;
+----------------------------------------+-----------------+
| Variable_name                          | Value           |
+----------------------------------------+-----------------+
| default_password_lifetime              | 0               |
| disconnect_on_expired_password         | ON              |
| log_builtin_as_identified_by_password  | OFF             |
| mysql_native_password_proxy_users      | OFF             |
| old_passwords                          | 0               |
| report_password                        |                 |
| sha256_password_auto_generate_rsa_keys | ON              |
| sha256_password_private_key_path       | private_key.pem |
| sha256_password_proxy_users            | OFF             |
| sha256_password_public_key_path        | public_key.pem  |
+----------------------------------------+-----------------+
10 rows in set (0.01 sec)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-4-修改数据库编码为UTF-8"><a href="#2-3-4-修改数据库编码为UTF-8" class="headerlink" title="2.3.4 修改数据库编码为UTF-8"></a>2.3.4 修改数据库编码为UTF-8</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 在&#x2F;etc&#x2F;my.cnf文件中的添加以下内容
character_set_server&#x3D;utf8
init_connect&#x3D;&#39;SET NAMES utf8&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-5-添加Root用户的登录权限"><a href="#2-3-5-添加Root用户的登录权限" class="headerlink" title="2.3.5 添加Root用户的登录权限"></a>2.3.5 添加Root用户的登录权限</h4><p>默认只允许 root 帐户在本地登录，如果要在其它机器上连接 MySQL，必须修改 root 允许远程连接，或者添加一个允许远程连接的帐户</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1. 进入mysql
[root@master SoftWare]# mysql -uroot -p123456
## 2. 修改root的远程访问权限
##    root代表用户名， %代表任何主机都可以访问， 123456为root访问的密码
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION; 
## 3. flush privileges 刷新MySQL的系统权限，使其即时生效，否则就重启服务器
mysql&gt; FLUSH PRIVILEGES;
## 4. 退出
mysql&gt; exit;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-4-安装Hive"><a href="#2-4-安装Hive" class="headerlink" title="2.4 安装Hive"></a>2.4 安装Hive</h3><hr>
#### 2.4.1 上传解压Hive压缩包配置环境变量

<p>在node01和node02上都要执行一遍。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1、创建新的目录用于存放Hive安装包
[root@node01 ~]# mkdir &#x2F;opt&#x2F;apps&#x2F;Hive
[root@node01 ~]# cd &#x2F;opt&#x2F;apps
[root@node01 apps]# ls
Hadoop3.1.4  Hive  JDK1.8
## 2、上传Hive安装包到Hive文件中
[root@node01 Hive]# rz
## 3、解压Hive安装包
[root@node01 Hive]# ls
apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz
[root@node01 Hive]# tar -zxf apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz 
## 4、重命名文件，方便使用
[root@node01 Hive]# mv apache-hive-3.1.2-bin hive-3.1.2
[root@node01 Hive]# ls
apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz   hive-3.1.2
## 5、删除Hive安装包
[root@node01 Hive]# rm -rf apache-hive-3.1.2-bin-hadoop-3.1.4.tar.gz
[root@node01 Hive]# ls
 hive-3.1.2
## 6、配置环境变量
[root@node01 Hive]# cd hive-3.1.2&#x2F;
[root@node01 hive-3.1.2]# pwd
&#x2F;opt&#x2F;apps&#x2F;Hive&#x2F;hive-3.1.2
## 编辑 profile 文件，添加以下环境变量内容
[root@node01 hive-2.3.6]# vim &#x2F;etc&#x2F;profile
## Hive 环境变量
##Hive
export HIVE_HOME&#x3D;&#x2F;opt&#x2F;apps&#x2F;Hive&#x2F;hive-3.1.2
export PATH&#x3D;$PATH:$HIVE_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-2-修改相关配置文件"><a href="#2-4-2-修改相关配置文件" class="headerlink" title="2.4.2 修改相关配置文件"></a>2.4.2 修改相关配置文件</h4><h5 id="2-4-2-1-Server端配置（node01）"><a href="#2-4-2-1-Server端配置（node01）" class="headerlink" title="2.4.2.1 Server端配置（node01）"></a>2.4.2.1 Server端配置（node01）</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 新建一个conf文件，在里面创建hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml配置文件，并添加一下内容
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># vim conf<span class="token operator">/</span>hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml

<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> standalone<span class="token operator">=</span><span class="token string">"no"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">?</span>xml<span class="token operator">-</span>stylesheet <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">"text/xsl"</span> href<span class="token operator">=</span><span class="token string">"configuration.xsl"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">></span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库连接地址，使用MySQL存储元数据信息<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionURL<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node03<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>metastore<span class="token operator">?</span>createDatabaseIfNotExist<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库驱动<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionDriverName<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库用户名<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionUserName<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>密码<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>javax<span class="token punctuation">.</span>jdo<span class="token punctuation">.</span>option<span class="token punctuation">.</span>ConnectionPassword<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>HDFS路径，用于存储不同 map<span class="token operator">/</span>reduce 阶段的执行计划和这些阶段的中间输出结果。<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>local<span class="token punctuation">.</span>scratchdir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>hive<span class="token operator">/</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>HDFS路径，本地表的默认位置<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>warehouse<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive 查询日志所在的目录，如果该值为空，将不创建查询日志。<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>querylog<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive操作日志<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>server2<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>operation<span class="token punctuation">.</span>log<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：远程资源下载的临时目录<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>downloaded<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>resources<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> hiveserver2用户名 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>beeline<span class="token punctuation">.</span>hs2<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>user<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> hiveserver2密码 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>beeline<span class="token punctuation">.</span>hs2<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>password<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-4-2-2-Client端配置（node02）"><a href="#2-4-2-2-Client端配置（node02）" class="headerlink" title="2.4.2.2 Client端配置（node02）"></a>2.4.2.2 Client端配置（node02）</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 新建一个conf文件，在里面创建hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml配置文件，并添加一下内容
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># vi conf<span class="token operator">/</span>hive<span class="token operator">-</span>site<span class="token punctuation">.</span>xml

<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> standalone<span class="token operator">=</span><span class="token string">"no"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">?</span>xml<span class="token operator">-</span>stylesheet <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">"text/xsl"</span> href<span class="token operator">=</span><span class="token string">"configuration.xsl"</span><span class="token operator">?</span><span class="token operator">></span>
<span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">></span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里配置的是否启用本地服务器连接Hive，这里我们是客户端和服务端分开的一个配置，所以这里设置为<span class="token boolean">false</span><span class="token punctuation">.</span>-<span class="token operator">-></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>local<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>HDFS路径，用于存储不同 map<span class="token operator">/</span>reduce 阶段的执行计划和这些阶段的中间输出结果。<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>local<span class="token punctuation">.</span>scratchdir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>hive<span class="token operator">/</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地表的默认位置<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>warehouse<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Hive连接到该URI请求远程元存储的元数据<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>metastore<span class="token punctuation">.</span>uris<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span> 
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>thrift<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node01<span class="token operator">:</span><span class="token number">9083</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive 查询日志所在的目录，如果该值为空，将不创建查询日志。<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>querylog<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：Hive操作日志<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>server2<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>operation<span class="token punctuation">.</span>log<span class="token punctuation">.</span>location<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>logs<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>本地路径：远程资源下载的临时目录<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>downloaded<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>dir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">/</span>tmp<span class="token operator">/</span>hive<span class="token operator">/</span>resources<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>显示当前所使用的数据库<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>print<span class="token punctuation">.</span>current<span class="token punctuation">.</span>db<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>

  <span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>显示表头<span class="token operator">--</span><span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hive<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>print<span class="token punctuation">.</span>header<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-3-添加Mysql驱动"><a href="#2-4-3-添加Mysql驱动" class="headerlink" title="2.4.3 添加Mysql驱动"></a>2.4.3 添加Mysql驱动</h4><p>服务端（node01）与客户端（node02）都需要将驱动jar包上传至lib目录下</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 上传驱动jar包到lib目录下
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># cd lib<span class="token operator">/</span>
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> lib<span class="token punctuation">]</span># rz <span class="token operator">-</span>E
rz waiting to <span class="token namespace">receive<span class="token punctuation">.</span></span>
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> lib<span class="token punctuation">]</span># ls mysql<span class="token operator">-</span><span class="token operator">*</span>
mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">-</span><span class="token number">5.1</span><span class="token number">.49</span><span class="token punctuation">.</span>jar  mysql<span class="token operator">-</span>metadata<span class="token operator">-</span>storage<span class="token operator">-</span><span class="token number">0.12</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-4-修改日志文件"><a href="#2-4-4-修改日志文件" class="headerlink" title="2.4.4 修改日志文件"></a>2.4.4 修改日志文件</h4><p>Hive 的 log 默认存放在 /tmp/root/hive.log目录下（当前用户名下），可以对其进行修改，两台节点均需要配置</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## 重新复制一份log4j配置文件，从Hive <span class="token number">2.1</span><span class="token number">.0</span> 开始，使用的是log4j2。
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># cp conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>template conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token punctuation">]</span># vi conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties
## 修改下面的内容
property<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>log<span class="token punctuation">.</span>dir <span class="token operator">=</span> <span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-5-格式化Hive"><a href="#2-4-5-格式化Hive" class="headerlink" title="2.4.5 格式化Hive"></a>2.4.5 格式化Hive</h4><p>先修改Hadoop的相关配置，否则会报错。</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## <span class="token number">1.</span> 修改 Hadoop 中的 core<span class="token operator">-</span>site<span class="token punctuation">.</span>xml 配置文件
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> Hive<span class="token punctuation">]</span># vi <span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>etc<span class="token operator">/</span>hadoop<span class="token operator">/</span>core<span class="token operator">-</span>site<span class="token punctuation">.</span>xml
## 添加以下内容
<span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hadoop<span class="token punctuation">.</span>proxyuser<span class="token punctuation">.</span>root<span class="token punctuation">.</span>groups<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>root<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>description<span class="token punctuation">></span></span>Allow the superuser oozie to <span class="token namespace">impersonate</span> any members of the group group1 and group2 <span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
<span class="token generics"><span class="token punctuation">&lt;</span>property<span class="token punctuation">></span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>name<span class="token punctuation">></span></span>hadoop<span class="token punctuation">.</span>proxyuser<span class="token punctuation">.</span>root<span class="token punctuation">.</span>hosts<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>description<span class="token punctuation">></span></span>The superuser can connect only from host1 and host2 to <span class="token namespace">impersonate</span> a user<span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在node01上格式化Hive</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># schematool <span class="token operator">-</span>initSchema <span class="token operator">-</span>dbType mysql
SLF4J<span class="token operator">:</span> Class path contains multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>share<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.10</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> See http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>org<span class="token operator">/</span>codes<span class="token punctuation">.</span>html#multiple_bindings <span class="token keyword">for</span> an explanation<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Actual binding is of <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>
Metastore connection URL<span class="token operator">:</span>     jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node03<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>metastore<span class="token operator">?</span>createDatabaseIfNotExist<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span>
Metastore Connection Driver <span class="token operator">:</span>     com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
Metastore connection User<span class="token operator">:</span>     root
Starting metastore schema initialization to <span class="token number">2.3</span><span class="token number">.0</span>
Initialization script hive<span class="token operator">-</span>schema<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.0</span><span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>sql
Initialization script completed
schemaTool completed
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-6-启动Hive"><a href="#2-4-6-启动Hive" class="headerlink" title="2.4.6  启动Hive"></a>2.4.6  启动Hive</h4><p>两种方式区别</p>
<ul>
<li><p>方式一：只要是支持Jdbc的，都能连接（支持的是Jdbc协议）</p>
</li>
<li><p>方式二：必须使用hive客户端才能连接（支持的是thrift协议）</p>
</li>
</ul>
<p>先启动Hadoop集群</p>
<p>启动方法1</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1. 启动服务端  将启动时的结果输出到null中（扔掉） &amp;表示后台运行，在前台不显示
[root@node01 hive-3.1.2]# hiveserver2 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;

## 2. 查询服务端进程 ID
[root@node01 hive-3.1.2]# ps -aux| grep hiveserver2
root      13931  1.0 11.1 2344932 431620 pts&#x2F;0  Sl   00:10   0:16
## 3. 停止服务端【这里暂时不操作，关闭 Hive 的时候操作】
[root@node01 hive-3.1.2]# kill -9 13931
##4.先关闭Hadoop集群的安全模式
[root@node01 ~]# hdfs dfsadmin -safemode leave   &#x2F;&#x2F;集群退出安全模式
Safe mode is OFF
## 5. 启动客户端
[root@node02 hive-3.1.2]# beeline -u jdbc:hive2:&#x2F;&#x2F;node01:10000 -n root -p 123456
0: jdbc:hive2:&#x2F;&#x2F;node01:10000&gt; show tables;
+-----------+
| tab_name  |
+-----------+ |
+-----------+
1 row selected (0.616 seconds)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动方法2</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 1. 启动服务端
[root@node01 hive-2.3.6]# hive --service metastore &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;
## 2. 查看服务端进程 ID
[root@node01 hive-2.3.6]# ps -aux| grep metastore
root      14342  5.5  8.9 2297776 345508 pts&#x2F;0  Sl   01:18   0:09
## 3. 杀死服务进程
[root@node01 hive-2.3.6]# kill -9 14342
## 4. 启动客户端
[root@node02 hive-2.3.6]# hive
hive (default)&gt; show tables;
OK
tab_name
student2
Time taken: 0.755 seconds, Fetched: 1 row(s)
hive (default)&gt; exit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动方法3</p>
<pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">## <span class="token number">1.</span> 启动服务端
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># hive <span class="token operator">--</span>service metastore <span class="token operator">></span> <span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span> <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span>
## <span class="token number">2.</span> 查看服务端进程 ID
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># ps <span class="token operator">-</span>aux<span class="token operator">|</span> grep metastore
root      <span class="token number">14342</span>  <span class="token number">5.5</span>  <span class="token number">8.9</span> <span class="token number">2297776</span> <span class="token number">345508</span> pts<span class="token operator">/</span><span class="token number">0</span>  Sl   <span class="token number">01</span><span class="token operator">:</span><span class="token number">18</span>   <span class="token number">0</span><span class="token operator">:</span><span class="token number">09</span>
## <span class="token number">3.</span> 杀死服务进程
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node01</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># kill <span class="token operator">-</span><span class="token number">9</span> <span class="token number">14342</span>
## <span class="token number">4.</span> 启动客户端（用的比较多的方法，因为可以写脚本）
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@node02</span> hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">]</span># hive <span class="token operator">-</span>e <span class="token string">"show tables;"</span>
which<span class="token operator">:</span> no hbase in <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>jre<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_212<span class="token operator">/</span>jre<span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>bin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>sbin<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>bin<span class="token punctuation">)</span>
SLF4J<span class="token operator">:</span> Class path contains multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> Found binding in <span class="token punctuation">[</span>jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.7</span><span class="token operator">/</span>share<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.10</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span>
SLF4J<span class="token operator">:</span> See http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>org<span class="token operator">/</span>codes<span class="token punctuation">.</span>html#multiple_bindings <span class="token keyword">for</span> an explanation<span class="token punctuation">.</span>
SLF4J<span class="token operator">:</span> Actual binding is of <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>

Logging initialized using configuration in file<span class="token operator">:</span><span class="token operator">/</span>opt<span class="token operator">/</span>SoftWare<span class="token operator">/</span>Hive<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token operator">/</span>conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties Async<span class="token operator">:</span> <span class="token boolean">true</span>
OK
tab_name
student2
Time taken<span class="token operator">:</span> <span class="token number">1.274</span> seconds<span class="token punctuation">,</span> Fetched<span class="token operator">:</span> <span class="token number">1</span> row<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hive编程</tag>
      </tags>
  </entry>
  <entry>
    <title>3.Hive基本命令</title>
    <url>/2021/03/02/3.Hive%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="3-1-Beeline命令"><a href="#3-1-Beeline命令" class="headerlink" title="3.1 Beeline命令"></a>3.1 Beeline命令</h3><hr>
Beeline是 Hive 0.11版本引入的新命令行客户端工具,基于SQLLine CLI的JDBC客户端。

<p>Beeline支持内嵌模式(embedded mode)和远程模式(remote mode)。在嵌入式模式下，运行嵌入式的Hive(类似Hive CLI)，而远程模式可以通过Thrift连接到独立的HiveServer2进程上。从Hive 0.14版本开始，Beeline使用HiveServer2工作时，它也会从HiveServer2输出日志信息到STDERR。</p>
<ul>
<li><strong>Hive的三种安装方式</strong></li>
</ul>
<blockquote>
<p>内嵌模式：不需要额外安装元数据库，采用的是Hive默认的Derby数据库，但这种模式有极大的缺陷就在于只允许一个 Hive 会话连接。</p>
<p>独立模式：在安装 Hive 的节点上安装一个 MySQL 服务端，并且将 <code>hive.metastore.local</code> 设置为 <code>true</code></p>
<p>远程模式：将 Hive 服务端与元数据的存储地址分开，元数据直接存储在远程的数据库服务器上即可。因此这里我们采用的是 node01 安装 Hive 服务端，而node03 安装 MySQL，以此来实现 Hive 与元数据的解耦操作。</p>
</blockquote>
<p>Beeline和其他工具有一些不同，执行查询都是正常的SQL输入。</p>
<ul>
<li><p>create databases;【创建数据库】</p>
</li>
<li><p>select * from table_name;【查询表】</p>
</li>
</ul>
<p>但是如果是一些管理的命令，比如进行连接，中断，退出，执行Beeline命令需要带上“!”，不需要终止符。</p>
<ul>
<li><strong>!connect url</strong> 【连接不同的Hive2服务器】</li>
<li><strong>!exit</strong> 【退出shell】</li>
<li><strong>!help</strong> 【显示全部命令列表】</li>
<li><strong>!verbose</strong> 【显示查询追加的明细】</li>
</ul>
<h3 id="3-2-hive-e"><a href="#3-2-hive-e" class="headerlink" title="3.2 hive  -e"></a>3.2 hive  -e</h3><hr>

<p>不用进入交互窗口就能执行数据库相关命令</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@node02</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># hive -e "show databases";</span>
<span class="token comment">## 以下是结果</span>
which: <span class="token keyword">no</span> hbase <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>bin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>jre<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>bin:<span class="token operator">/</span>root<span class="token operator">/</span>bin<span class="token punctuation">)</span>
SLF4J: Class path <span class="token keyword">contains</span> multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.10</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span><span class="token keyword">share</span><span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.25</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: See http:<span class="token comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span>
SLF4J: Actual binding <span class="token operator">is</span> <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> e308f3e6<span class="token operator">-</span><span class="token number">6</span>cac<span class="token operator">-</span><span class="token number">4</span>e85<span class="token operator">-</span>b4a1<span class="token operator">-</span><span class="token number">2</span>f53376dc53c

Logging initialized <span class="token keyword">using</span> configuration <span class="token operator">in</span> <span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties Async: <span class="token boolean">true</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> <span class="token number">2</span>b23427f<span class="token operator">-</span><span class="token number">3062</span><span class="token operator">-</span><span class="token number">4</span>ad0<span class="token operator">-</span>a6e4<span class="token operator">-</span><span class="token number">5</span>c51159af89d
OK
database_name
<span class="token keyword">default</span>
student
teaceher
<span class="token keyword">Time</span> taken: <span class="token number">3.745</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">3</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-3-hive-f"><a href="#3-3-hive-f" class="headerlink" title="3.3 hive -f"></a>3.3 hive -f</h3><hr>

<p>不用进入交互窗口，用<code>vim</code>或<code>vi</code>创建一个文件，写入一些sql命令，通过hive -f 即可执行。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># vim hive.sql</span>
<span class="token comment">## 文件中的内容</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token comment">## 以下是执行结果</span>
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># hive -f hive.sql</span>
which: <span class="token keyword">no</span> hbase <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>bin:<span class="token operator">/</span>usr<span class="token operator">/</span>sbin:<span class="token operator">/</span>usr<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span class="token operator">/</span>jre<span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>bin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>sbin:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>bin:<span class="token operator">/</span>root<span class="token operator">/</span>bin<span class="token punctuation">)</span>
SLF4J: Class path <span class="token keyword">contains</span> multiple SLF4J bindings<span class="token punctuation">.</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>lib<span class="token operator">/</span>log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl<span class="token operator">-</span><span class="token number">2.10</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: Found binding <span class="token operator">in</span> <span class="token punctuation">[</span>jar:<span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span><span class="token keyword">share</span><span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>lib<span class="token operator">/</span>slf4j<span class="token operator">-</span>log4j12<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.25</span><span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>slf4j<span class="token operator">/</span>impl<span class="token operator">/</span>StaticLoggerBinder<span class="token punctuation">.</span>class<span class="token punctuation">]</span>
SLF4J: See http:<span class="token comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span>
SLF4J: Actual binding <span class="token operator">is</span> <span class="token keyword">of</span> <span class="token keyword">type</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Log4jLoggerFactory<span class="token punctuation">]</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> <span class="token number">1</span>bf5a42e<span class="token operator">-</span>f5e7<span class="token operator">-</span><span class="token number">4</span>bd4<span class="token operator">-</span><span class="token number">87</span>cb<span class="token operator">-</span>a5d8aa719c62

Logging initialized <span class="token keyword">using</span> configuration <span class="token operator">in</span> <span class="token keyword">file</span>:<span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span><span class="token operator">/</span>conf<span class="token operator">/</span>hive<span class="token operator">-</span>log4j2<span class="token punctuation">.</span>properties Async: <span class="token boolean">true</span>
Hive <span class="token keyword">Session</span> ID <span class="token operator">=</span> <span class="token number">1</span>fe787c1<span class="token operator">-</span>bac7<span class="token operator">-</span><span class="token number">42</span>bf<span class="token operator">-</span><span class="token number">9</span>cb6<span class="token operator">-</span><span class="token number">2254</span>f95fab17
OK
database_name
<span class="token keyword">default</span>
student
teaceher
<span class="token keyword">Time</span> taken: <span class="token number">3.399</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">3</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-4-其他命令"><a href="#3-4-其他命令" class="headerlink" title="3.4 其他命令"></a>3.4 其他命令</h3><hr>

<ul>
<li>退出hive客户端命令（非beeline模式下）</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">exit</span><span class="token punctuation">;</span> 
hive<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span>quit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>退出hive客户端命令（beeline模式下）</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">!</span>quit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>通过客户端用命令行来查看HDFS的文件系统</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span> dfs <span class="token operator">-</span>ls <span class="token operator">/</span><span class="token punctuation">;</span>
Found <span class="token number">4</span> items
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">20</span>:<span class="token number">09</span> <span class="token operator">/</span><span class="token keyword">data</span>
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span>:<span class="token number">53</span> <span class="token operator">/</span>hive
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">16</span>:<span class="token number">42</span> <span class="token operator">/</span>system
drwxrwxrwx   <span class="token operator">-</span> root supergroup          <span class="token number">0</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">19</span>:<span class="token number">04</span> <span class="token operator">/</span>tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看本地的文件系统（即虚拟机上的文件系统）</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">!</span> ls <span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token punctuation">;</span>
<span class="token keyword">data</span>
hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span>
hive<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.2</span>
hive<span class="token punctuation">.</span><span class="token keyword">sql</span>
jdk1<span class="token punctuation">.</span><span class="token number">8.0</span>_261<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>查看历史记录(即hive客户端的操作记录)</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 必须进入主目录才行</span>
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># cat .hivehistory</span>
cat: <span class="token punctuation">.</span>hivehistory: 没有那个文件或目录
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> apps<span class="token punctuation">]</span><span class="token comment"># cd ~</span>
<span class="token punctuation">[</span>root<span class="token variable">@node02</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># cat .hivehistory</span>
<span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
<span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="3-5-HQL"><a href="#3-5-HQL" class="headerlink" title="3.5 HQL"></a>3.5 HQL</h3><hr>

<blockquote>
<p>HiveQL（简称HQL）是支持的类似的查询语言，HQL大体分为DDL、DDL、DML、UDF 四种类型。</p>
<ul>
<li><p>DDL:  （database definition language） 数据定义语言 引起的是结构上变化，不会影响数据 create drop alter</p>
</li>
<li><p>DML: DataManipulationLanguage 数据操作语言 不会引起结构上的变化 引起的是数据的变化 update</p>
</li>
<li><p>DQL: 数据查询语言 不会引起结构上的变化，也不会引起数据的变化，select where</p>
</li>
</ul>
</blockquote>
<p>DDL可以创建数据库、创建表、进行数据库和表的删除；DML可以进行数据的添加、查询；UDF还支持用户自定义查询函数。</p>
<h3 id="3-6-Hive之DDL"><a href="#3-6-Hive之DDL" class="headerlink" title="3.6 Hive之DDL"></a>3.6 Hive之DDL</h3><hr>

<blockquote>
<p>（Database Definition Language） 数据定义语言 引起的是结构上变化，不会影响数据 create drop alter。</p>
<p><strong>DDL主要负责的是数据库的创建、查看、修改、删除、表的创建、修改。</strong>（主要侧重于对数据库、表的操作）</p>
</blockquote>
<ul>
<li><strong>内部表：</strong></li>
</ul>
<p>由Hive进行管理，创建内部表时，把内部表对应的数据会一并复制到对应的HDFS上（数据仓库）HIve所对应的目录下</p>
<ul>
<li><strong>外部表</strong></li>
</ul>
<p>不由Hive管理，在创建外部表时，同时指定一个指向实际数据的路径作为表的信息一同储存在映射表中，用户可以通过查询表中这一数据知道该映射结构表的实际数据在什么位置。创建外部表时，仅记录数据所在的路径，不会对数据位置进行任何改变</p>
<p><strong>内部表和外部表的区别：</strong></p>
<blockquote>
<ul>
<li><p>内部表和外部表在结构上没有任何区别，但在删除数据时，内部表可以用Hive进行删除，同时会把数据仓库上（HDFS上）对应的数据删掉。外部表则只是删除数据库中的数据信息，但不会真正的数据。</p>
</li>
<li><p>创建外部表时，要加一个External</p>
</li>
</ul>
</blockquote>
<ul>
<li><strong>分区表：</strong></li>
</ul>
<p>分区表实际上就是对应一个 HDFS 文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive 中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过 WHERE 子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多。（例如，将数科所有班级存入一张大表中（<strong>其实是个目录</strong>），为了利于管理，看起来更加系统，将这个大表进行分区，将数科191、数科192、数科201、数科202划分为四个区，辅导员需要哪个班级的数据时直接调对应分区的表即可。）</p>
<p>![](3.Hive基本命令.assets/Image 1.png)</p>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><h5 id="3-6-1-创建数据库"><a href="#3-6-1-创建数据库" class="headerlink" title="3.6.1 创建数据库"></a>3.6.1 创建数据库</h5><p>创建数据库的SQL格式</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> database_name
  <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> database_comment<span class="token punctuation">]</span>
  <span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token keyword">WITH</span> DBPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">--------------------------------------------------------------------------------------</span>
  <span class="token comment">--(DATABASE|SCHEMA)：必须有的参数</span>
 <span class="token comment">-- [IF NOT EXISTS]：可有可无（判断数据库是否已经存在）</span>
 <span class="token comment">-- [COMMENT database_comment]：可有可无，对数据库加以说明</span>
 <span class="token comment">-- [LOCATION hdfs_path]：指明数据库创建的路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--if not exists 用于判断数据库是否已经存在，不存在就创建（可有可无），COMMENT用于对数据库做介绍（可有可无）</span>
<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> books <span class="token keyword">COMMENT</span> <span class="token string">"第一个数据库"</span><span class="token punctuation">;</span>
<span class="token comment">--什么也不加</span>
<span class="token keyword">create</span> <span class="token keyword">database</span>  books<span class="token punctuation">;</span>
<span class="token comment">--指定创建位置</span>
<span class="token keyword">create</span> <span class="token keyword">database</span>  books location <span class="token string">"/school"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="3-6-2-查看数据库"><a href="#3-6-2-查看数据库" class="headerlink" title="3.6.2 查看数据库"></a>3.6.2 查看数据库</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查看数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token comment">--过滤显示数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token operator">like</span> <span class="token string">"student"</span><span class="token punctuation">;</span>
<span class="token comment">--显示数据库的基本信息</span>
<span class="token keyword">desc</span> <span class="token keyword">database</span> student<span class="token punctuation">;</span>

OK
db_name	<span class="token keyword">comment</span>	location	owner_name	owner_type	parameters
student		hdfs:<span class="token comment">//node01:9000/hive/warehouse/student.db	root	USER	</span>
<span class="token keyword">Time</span> taken: <span class="token number">0.185</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token comment">--显示数据库的详细信息</span>
 <span class="token keyword">desc</span> <span class="token keyword">database</span> <span class="token keyword">extended</span>  student<span class="token punctuation">;</span>
 
OK
db_name	<span class="token keyword">comment</span>	location	owner_name	owner_type	parameters
student		hdfs:<span class="token comment">//node01:9000/hive/warehouse/student.db	root	USER	</span>
<span class="token keyword">Time</span> taken: <span class="token number">0.108</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-6-3-修改数据库"><a href="#3-6-3-修改数据库" class="headerlink" title="3.6.3 修改数据库"></a>3.6.3 修改数据库</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 修改数据库的属性</span>
<span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> DBPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- (注意: 在 Hive 0.14.0 增加了 SCHEMA 选项)</span>

<span class="token comment"># 修改数据库的拥有者和角色</span>
<span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> OWNER <span class="token punctuation">[</span><span class="token keyword">USER</span><span class="token operator">|</span>ROLE<span class="token punctuation">]</span> user_or_role<span class="token punctuation">;</span> 
<span class="token comment">-- (注意: Hive 0.13.0 以上版本可用;在 Hive 0.14.0 增加了 SCHEMA 选项)</span>
<span class="token comment"># 修改数据库的存储路径</span>
<span class="token keyword">ALTER</span> <span class="token punctuation">(</span><span class="token keyword">DATABASE</span><span class="token operator">|</span><span class="token keyword">SCHEMA</span><span class="token punctuation">)</span> database_name <span class="token keyword">SET</span> LOCATION hdfs_path<span class="token punctuation">;</span>
<span class="token comment">-- (注意: Hive 2.2.1, 2.4.0以及以上版本可用)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-6-4-删除数据库"><a href="#3-6-4-删除数据库" class="headerlink" title="3.6.4 删除数据库"></a>3.6.4 删除数据库</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--删除空数据库</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> books<span class="token punctuation">;</span>
<span class="token comment">--如果存在的话删除空数据库</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> books<span class="token punctuation">;</span>
<span class="token comment">--强制删除数据库</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> books <span class="token keyword">cascade</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><h5 id="3-6-3-创建内部表"><a href="#3-6-3-创建内部表" class="headerlink" title="3.6.3 创建内部表"></a>3.6.3 创建内部表</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> studen<span class="token punctuation">(</span>
    stuid <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token comment">--学生学号</span>
    stuname string<span class="token punctuation">,</span> <span class="token comment">--学生姓名</span>
    stuage <span class="token keyword">int</span> <span class="token comment">--学生年龄</span>
<span class="token punctuation">)</span>
<span class="token comment">-- 每行字段以 \t分割</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\t'</span>

<span class="token comment">-- 根据查询结果创建表：有数据</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student2 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student4 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> teacher1<span class="token punctuation">;</span>

<span class="token comment">--根据已经存在的表创建表（类似复制一张表）</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student3 <span class="token operator">like</span> student<span class="token punctuation">;</span>

OK
student3<span class="token punctuation">.</span>sno	student3<span class="token punctuation">.</span>sname	student3<span class="token punctuation">.</span>sage	student3<span class="token punctuation">.</span>ssex
<span class="token keyword">Time</span> taken: <span class="token number">0.773</span> seconds
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>加载数据到表中</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/opt/apps/data/teacher.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> teacher<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li> 查看表的类型</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> formatted student3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h5 id="3-6-4-创建外部表"><a href="#3-6-4-创建外部表" class="headerlink" title="3.6.4 创建外部表"></a>3.6.4 创建外部表</h5><p>外部表的创建与内部表没什么区别，只不过是在创建时要加上一个**<font color=red>external</font>**关键字即可。</p>
<pre class="line-numbers language-Sql" data-language="Sql"><code class="language-Sql">create external table  tea(
    stuid int,
    stuname string,
    stuage int
)
row format delimited fields terminated by &#39;\t&#39;;	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>加载数据到表中</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/opt/apps/data/teacher.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> teacher<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li> 查看数据</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ext_stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查询表的类型</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> formatted ext_stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>删除表</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> tea<span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> student3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h5 id="3-6-5-创建分区表"><a href="#3-6-5-创建分区表" class="headerlink" title="3.6.5 创建分区表"></a>3.6.5 创建分区表</h5><ul>
<li>创建分区表</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name string <span class="token punctuation">)</span>
partitioned <span class="token keyword">by</span><span class="token punctuation">(</span><span class="token keyword">day</span> string <span class="token keyword">comment</span> <span class="token string">'study'</span><span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>上传数据到分区中</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/opt/apps/data/student.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> student <span class="token keyword">partition</span> <span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>增加分区</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--增加单分区</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'05'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">--增加多分区</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'06'</span><span class="token punctuation">)</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'07'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>删除分区</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student4 <span class="token keyword">drop</span> <span class="token keyword">partition</span> <span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'183'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看分区结构</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> formatted student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>study.db为数据库；student为表（其实再HDFS文件系统中是一个目录）；表里面的day05、day06、day07、day08为分区表。</p>
<p><img src="3.Hive%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.assets/QQ%E6%88%AA%E5%9B%BE20201214203723.png"></p>
<ul>
<li>创建二级分区</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> teacher<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name string<span class="token punctuation">)</span>
partitioned <span class="token keyword">by</span><span class="token punctuation">(</span><span class="token keyword">day</span> string <span class="token punctuation">,</span><span class="token keyword">month</span> string <span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="3.Hive%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.assets/QQ%E6%88%AA%E5%9B%BE20201214205505.png"></p>
<ul>
<li>分区数据关联的三种方式</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方式一：先hadoop上传，后修复</span>
dfs <span class="token operator">-</span>put <span class="token operator">/</span>opt<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>student<span class="token punctuation">.</span>txt <span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">/</span>student<span class="token punctuation">.</span>db<span class="token operator">/</span>student<span class="token operator">/</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token number">04</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 执行修复</span>
msck repair <span class="token keyword">table</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 查看</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 方式二：先hadoop上传，后修改</span>
dfs <span class="token operator">-</span>mkdir <span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">/</span>study<span class="token punctuation">.</span>db<span class="token operator">/</span>student<span class="token operator">/</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token number">06</span><span class="token punctuation">;</span>
dfs <span class="token operator">-</span>put <span class="token operator">/</span>opt<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>teacher <span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">/</span>study<span class="token punctuation">.</span>db<span class="token operator">/</span>student<span class="token operator">/</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token number">06</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'06'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 方式三：先上传，后加载</span>
dfs <span class="token operator">-</span>mkdir <span class="token operator">/</span>hive<span class="token operator">/</span>warehouse<span class="token operator">/</span>study<span class="token punctuation">.</span>db<span class="token operator">/</span>student<span class="token operator">/</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token number">07</span><span class="token punctuation">;</span>
<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/opt/data/teacher.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> student <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">day</span><span class="token operator">=</span><span class="token string">'07'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="3-6-6-修改表"><a href="#3-6-6-修改表" class="headerlink" title="3.6.6 修改表"></a>3.6.6 修改表</h5><ul>
<li>表的重命名</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">rename</span> <span class="token keyword">to</span> student6<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>添加列</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student6 <span class="token keyword">add</span> <span class="token keyword">columns</span><span class="token punctuation">(</span>new string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>更改列：将某一列更改</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student6 change <span class="token keyword">column</span> new bb string<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>替换所有列：后面跟的是新的列名</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student6 <span class="token keyword">replace</span> <span class="token keyword">columns</span><span class="token punctuation">(</span>ids <span class="token keyword">int</span><span class="token punctuation">,</span>names string<span class="token punctuation">,</span>newb string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>修改内部表 student2 为外部表</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student2 <span class="token keyword">set</span> tblproperties<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'TRUE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="3-7-Hive之DML"><a href="#3-7-Hive之DML" class="headerlink" title="3.7 Hive之DML"></a>3.7 Hive之DML</h3><hr>

<blockquote>
<p> Hive 数据真正存放在 Hadoop 之上，因此最简单的数据导入方式就是将数据上传至 HDFS 相应目录即可，但是此操作会非常不方便，因此 Hive 为我们提供了以下数据加载的方式。</p>
<p><strong>DML负责数据的导入、导出、更新、删除</strong>等操作（主要负责对数据的操作）。</p>
</blockquote>
<h4 id="3-7-1-数据导入"><a href="#3-7-1-数据导入" class="headerlink" title="3.7.1 数据导入"></a>3.7.1 数据导入</h4><p>Hive的数据是存放在Hadoop之上的，因此Hive在处理数据时需要将数据上传到HDFS中去。比如创建内部表时，需要将数据复制到HDFS上指定的目录中去。</p>
<blockquote>
<p> Hive提供以下五种数据上传到HDFS上的方法，分别是：Load模式、Import模式、Insert模式、as select模式、Location模式</p>
</blockquote>
<h5 id="3-7-1-1-导入数据（Load模式）"><a href="#3-7-1-1-导入数据（Load模式）" class="headerlink" title="3.7.1.1 导入数据（Load模式）"></a>3.7.1.1 导入数据（Load模式）</h5><p><strong>创建普通数据表</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name string<span class="token punctuation">)</span> 
    <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>从本地(Linux)上传数据</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/opt/data/student'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>从本上传数据并覆盖原有</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'/opt/data/student'</span> overwrite <span class="token keyword">into</span> <span class="token keyword">table</span>  test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>创建分区表</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test02<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name string<span class="token punctuation">)</span>
partitioned <span class="token keyword">by</span> <span class="token punctuation">(</span>num string<span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>向分区表中加载数据</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span>  inpath <span class="token string">'/opt/apps/data/student.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> test02 <span class="token keyword">partition</span> <span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>向分区表中加载数据,但是不指定分区(可以上传成功,但会报错)</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span>  inpath <span class="token string">'/opt/apps/data/student.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> test02<span class="token punctuation">;</span>
<span class="token comment">## 错误如下</span>
Query ID <span class="token operator">=</span> root_20201218174108_6408e79a<span class="token operator">-</span><span class="token number">4</span>ec5<span class="token operator">-</span><span class="token number">4</span>aa1<span class="token operator">-</span><span class="token number">9</span>d5e<span class="token operator">-</span><span class="token number">52558</span>c638b98
Total jobs <span class="token operator">=</span> <span class="token number">3</span>
Launching Job <span class="token number">1</span> <span class="token keyword">out</span> <span class="token keyword">of</span> <span class="token number">3</span>
Number <span class="token keyword">of</span> reduce tasks <span class="token operator">not</span> specified<span class="token punctuation">.</span> Estimated <span class="token keyword">from</span> input <span class="token keyword">data</span> size: <span class="token number">1</span>
<span class="token operator">In</span> <span class="token keyword">order</span> <span class="token keyword">to</span> change the average <span class="token keyword">load</span> <span class="token keyword">for</span> a reducer <span class="token punctuation">(</span><span class="token operator">in</span> bytes<span class="token punctuation">)</span>:
  <span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>reducers<span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>per<span class="token punctuation">.</span>reducer<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">></span>
<span class="token operator">In</span> <span class="token keyword">order</span> <span class="token keyword">to</span> <span class="token keyword">limit</span> the maximum number <span class="token keyword">of</span> reducers:
  <span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>reducers<span class="token punctuation">.</span>max<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">></span>
<span class="token operator">In</span> <span class="token keyword">order</span> <span class="token keyword">to</span> <span class="token keyword">set</span> a constant number <span class="token keyword">of</span> reducers:
  <span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces<span class="token operator">=</span><span class="token operator">&lt;</span>number<span class="token operator">></span>
<span class="token keyword">Starting</span> Job <span class="token operator">=</span> job_1608280545793_0001<span class="token punctuation">,</span> Tracking URL <span class="token operator">=</span> http:<span class="token comment">//node02:8088/proxy/application_1608280545793_0001/</span>
<span class="token keyword">Kill</span> Command <span class="token operator">=</span> <span class="token operator">/</span>opt<span class="token operator">/</span>apps<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.1</span><span class="token number">.4</span><span class="token operator">/</span>bin<span class="token operator">/</span>mapred job  <span class="token operator">-</span><span class="token keyword">kill</span> job_1608280545793_0001
Hadoop job information <span class="token keyword">for</span> Stage<span class="token operator">-</span><span class="token number">1</span>: number <span class="token keyword">of</span> mappers: <span class="token number">0</span><span class="token punctuation">;</span> number <span class="token keyword">of</span> reducers: <span class="token number">0</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">17</span>:<span class="token number">41</span>:<span class="token number">19</span><span class="token punctuation">,</span><span class="token number">840</span> Stage<span class="token operator">-</span><span class="token number">1</span> map <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">,</span>  reduce <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">%</span>
Ended Job <span class="token operator">=</span> job_1608280545793_0001 <span class="token keyword">with</span> <span class="token keyword">errors</span>
Error during job<span class="token punctuation">,</span> obtaining debugging information<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
FAILED: Execution Error<span class="token punctuation">,</span> <span class="token keyword">return</span> code <span class="token number">2</span> <span class="token keyword">from</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mr<span class="token punctuation">.</span>MapRedTask
MapReduce Jobs Launched: 
Stage<span class="token operator">-</span>Stage<span class="token operator">-</span><span class="token number">1</span>:  HDFS <span class="token keyword">Read</span>: <span class="token number">0</span> HDFS <span class="token keyword">Write</span>: <span class="token number">0</span> FAIL
Total MapReduce CPU <span class="token keyword">Time</span> Spent: <span class="token number">0</span> msec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="3-7-2-导入数据-insert模式"><a href="#3-7-2-导入数据-insert模式" class="headerlink" title="3.7.2 导入数据(insert模式)"></a>3.7.2 导入数据(insert模式)</h5><blockquote>
<p> 也可以使用 insert 子句将查询结果插入表中 (这种插入方法只能一条一条的插入)。</p>
</blockquote>
<p><strong>创建分区表</strong></p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test03<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span>name string<span class="token punctuation">)</span>
 partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>age <span class="token keyword">int</span><span class="token punctuation">)</span>
 <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>向分区表中加载数据</li>
</ul>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span>  test03 <span class="token keyword">partition</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Hive编程</tag>
      </tags>
  </entry>
  <entry>
    <title>2.JS学习</title>
    <url>/2021/03/02/2.JS%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="2-1-初识JavaScript"><a href="#2-1-初识JavaScript" class="headerlink" title="2.1 初识JavaScript"></a>2.1 初识JavaScript</h3><hr>

<p>由布兰登艾奇发明，最初命名为LiveScript，最后与网景公司合作，改名为JavaScript(简称JS)，但JS与Java没有任何关系。</p>
<h4 id="2-1-1-什么是JS"><a href="#2-1-1-什么是JS" class="headerlink" title="2.1.1 什么是JS"></a>2.1.1 什么是JS</h4><hr>

<ul>
<li><p>JavaScript是世界上最流行的语言之一, 是一种<strong>运行在客户端</strong>的脚本语言( Script是脚本的意思)</p>
</li>
<li><p><strong>脚本语言</strong>:不需要编译,运行过程中由js解释器(js引擎)逐行来进行解释并执行</p>
</li>
<li><p>现在也可以基于Node.js技术进行服务器端编程</p>
</li>
</ul>
<img src="2.JS学习.assets/QQ截图20210122172104.png" style="zoom:67%;" />



<h4 id="2-1-2JS能做什么"><a href="#2-1-2JS能做什么" class="headerlink" title="2.1.2JS能做什么"></a>2.1.2JS能做什么</h4><hr>

<ul>
<li>表单动态校验 (密码强度检测) ( JS产生最初的目的)</li>
<li>网页特效</li>
<li>服务端开发(Node.js)</li>
<li>桌面程序(Electron)</li>
<li>App(Cordova)</li>
<li>控制硬件-物联网(Ruff)</li>
<li>游戏开发(cocos2d-js)</li>
</ul>
<h4 id="2-1-3-JS-CSS-HTML区别与联系"><a href="#2-1-3-JS-CSS-HTML区别与联系" class="headerlink" title="2.1.3 JS/CSS/HTML区别与联系"></a>2.1.3 JS/CSS/HTML区别与联系</h4><hr>

<p><strong>描述类语言：HTML/CSS标记语言</strong></p>
<p>HTML：html决定网页结构和内容（决定人看到什么），相当于人的身体。</p>
<p>CSS：CSS决定网页呈现给用户的样式，相当于人化妆、穿衣服。</p>
<p><strong>编程类语言：JS脚本语言</strong></p>
<p>JS：实现页面控制（决定功能）和业务逻辑，相当于人的各种动作。</p>
<h4 id="2-1-4-浏览器执行JS原理"><a href="#2-1-4-浏览器执行JS原理" class="headerlink" title="2.1.4 浏览器执行JS原理"></a>2.1.4 浏览器执行JS原理</h4><hr>

<p>浏览器分成两部分:<strong>渲染引擎和JS引擎</strong></p>
<ul>
<li><strong>渲染引擎</strong>:用来解析HTML与CSS ，俗称内核,比如chrome浏览器的blink ,老版本的webkit。</li>
<li><strong>JS引擎</strong>:也称为JS解释器，用来读取网页中的JavaScript代码,对其处理后运行,比如chrome浏览器的V8。</li>
</ul>
<blockquote>
<p> 浏览器本身并不会执行S代码，而是通过内置JavaScript引擎(解释器)来执行JS代码。</p>
<p>JS 引擎执行代码时逐行解释每一句源码(转换为机器语言) ，然后由计算机去执行,，以JavaScript语言归为脚本语言，会逐行解释执行。</p>
</blockquote>
<img src="2.JS学习.assets/QQ截图20210125113242.png" style="zoom: 67%;" />



<h4 id="2-1-5-JS三部分组成"><a href="#2-1-5-JS三部分组成" class="headerlink" title="2.1.5 JS三部分组成"></a>2.1.5 JS三部分组成</h4><hr>

<img src="2.JS学习.assets/QQ截图20210125113805.png" style="zoom:80%;" />

<p><strong>ECMAScript:</strong></p>
<p>**<font color=red>ECMAScript</font>**是由ECMA国际(原欧洲计算机制造商协会)进行标准化的一编程语言, 这种语言在万维网上应用广</p>
<p>泛，ECMAScript规定了JS的编程语法和基础核心知识,是所有浏览器厂商共同遵守的一套S语法工业标准。它往往被</p>
<p>称为JavaScript或JScript ，但实际上后两者是ECMAScript语言的实现和扩展，可简单理解为ECMAScript就是JS。</p>
<img src="2.JS学习.assets/QQ截图20210125114200.png" style="zoom:80%;" />



<p><strong>DOM-文档对象模型：</strong></p>
<p><strong><font color=red>文档对象模型</font></strong>( Document Object Model ，简称DOM)，是W3C组织推荐的处理可扩展标记语言的标准编程接口。</p>
<p>通过DOM提供的接口可以对页面上的各种元素进行操作(大小、位置、颜色等)。</p>
<p><strong>BOM-浏览器对象模型：</strong></p>
<p><strong><font color=red>浏览器对象模型</font></strong>(Browser Object Model ，简称BOM)，是指浏览器对象模型，它提供了独立于内容的、可以与浏览</p>
<p>器窗口进行互动的对象B结构。通过BOM可以操作浏览器窗口,比如B弹出框、控制浏览器跳转、获取分辨率等。</p>
<h4 id="2-1-6JS三种书写方式"><a href="#2-1-6JS三种书写方式" class="headerlink" title="2.1.6JS三种书写方式"></a>2.1.6JS三种书写方式</h4><hr>

<p>JS有三种书写方式（与CSS相同），分别为行内式、内嵌式、外联式</p>
<blockquote>
<p> <strong>行内式（一般不使用）：</strong></p>
<input type="button" value="丁志君" onclick="alter('想石雨')">

<p><strong>内嵌式（使用最多）：</strong></p>
<p>    <script><br>        alert('JS测试')<br>    </script></p>
<p> <strong>外联式：</strong></p>
<script src="first.js"></script>
</blockquote>
<h4 id="2-1-7输入输出语句"><a href="#2-1-7输入输出语句" class="headerlink" title="2.1.7输入输出语句"></a>2.1.7输入输出语句</h4><hr>

<p> <img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210125182327.png"></p>
<p><strong>prompt用法：</strong></p>
<blockquote>
<p>// 用户输入框</p>
<p>  prompt(‘请输入姓名’);</p>
</blockquote>
<p><strong>alter用法：</strong></p>
<blockquote>
<p> // 弹出框</p>
<p> alert(‘南雨’);</p>
</blockquote>
<p><strong>console.log用法：</strong></p>
<blockquote>
<p>// 输出到控制台，用于程序员观看分析</p>
<p>console.log(‘程序员观看’);</p>
</blockquote>
<h3 id="2-2变量"><a href="#2-2变量" class="headerlink" title="2.2变量"></a>2.2变量</h3><hr>
白话:变量就是一个装东西的盒子。

<p>通俗:变量是用于存放数据的容器。我们通过变量名获取数据，甚至数据可以修改。</p>
<p>本质:变量是程序在内存中申请的一块用来存放数据的空间。</p>
<img src="2.JS学习.assets/QQ截图20210125184219.png" style="zoom:80%;" />



<h4 id="2-2-1-变量的使用"><a href="#2-2-1-变量的使用" class="headerlink" title="2.2.1 变量的使用"></a>2.2.1 变量的使用</h4><hr>

<p>变量在使用时分为两部分：声明变量、赋值</p>
<p><strong>变量使用方法一：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//生命变量</span>
<span class="token keyword">var</span> age<span class="token punctuation">;</span>
<span class="token comment">//给变量赋值</span>
age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'程序员:'</span> <span class="token operator">+</span> yourname <span class="token operator">+</span> <span class="token string">'观看'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>变量使用方法二：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明变量并赋值</span>
<span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>yourname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p><strong>变量使用方法三：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用户输入框</span>
<span class="token keyword">var</span> yourname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入姓名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 弹出框</span>
<span class="token function">alert</span><span class="token punctuation">(</span>yourname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>var是一个JS关键字，用来声明变量( variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内</p>
<p>存空间，不需要程序员管。</p>
<p>age是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间。</p>
<h4 id="2-2-2-变量的使用"><a href="#2-2-2-变量的使用" class="headerlink" title="2.2.2 变量的使用"></a>2.2.2 变量的使用</h4><hr>
**变量重新赋值：**

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用户输入框</span>
<span class="token keyword">var</span> yourname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入姓名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出到控制台，用于程序员观看分析</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> yourname<span class="token punctuation">)</span><span class="token punctuation">;</span>
yourname <span class="token operator">=</span> <span class="token string">"石雨"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yourname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>申请多变量：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token string">"丁志君"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>只声明变量不赋值：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//只声明变量不赋值，系统无法识别，结果是undefined，未识别的</span>
<span class="token keyword">var</span> myname 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>不声明变量直接赋值：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//不声明变量直接赋值，可以直接使用</span>
myname<span class="token operator">=</span><span class="token number">1000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>变量值的交换：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> temp<span class="token punctuation">;</span>
<span class="token keyword">var</span> qing <span class="token operator">=</span> <span class="token string">"青苹果"</span>
<span class="token keyword">var</span> hong <span class="token operator">=</span> <span class="token string">"红苹果"</span>
temp <span class="token operator">=</span> qing<span class="token punctuation">;</span>
qing <span class="token operator">=</span> hong<span class="token punctuation">;</span>
hong <span class="token operator">=</span> temp<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qing<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hong<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-2-3-变量的命名规范"><a href="#2-2-3-变量的命名规范" class="headerlink" title="2.2.3 变量的命名规范"></a>2.2.3 变量的命名规范</h4><hr>

<ul>
<li>由字母(A-Za-z)、数字(0-9)、 下划线( )、元符号($ )组成，如: usrAge, num01, name+</li>
<li>严格区分大小写。var app；和var App；是两个变量</li>
<li>不能以数字开头。18age 是错误的</li>
<li>不能是关键字、保留字。例如: var、for、 while</li>
<li>变量名必须有意义。MMD BBD n|- → age .</li>
<li>遵守驼峰命名法。首字母小写,后面单词的首字母需要大写 myFirstName</li>
</ul>
<h3 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h3><hr>

<p>在计算机中,不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p>
<p>变量是用来存储值的所在处,它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算的</p>
<p>内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型,在程序运行过程中，类型会被自动确定。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// int num = 10; java</span>
<span class="token keyword">var</span> num<span class="token punctuation">;</span><span class="token comment">//这里的num我们是不确定属于哪种数据类型的</span>
<span class="token keyword">var</span> num <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// num属于数字型</span>
<span class="token comment">//js的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p>在代码运行时，变量的数据类型是由JS引擎根据=右边变量值的数据类型来判断的，运行完毕之后，变量就确定了数据类型。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// js是动态语言变量的数据类型是可以变化的</span>
varx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//x是数字型</span>
x<span class="token operator">=</span><span class="token string">'pink'</span><span class="token punctuation">;</span><span class="token comment">// x字符串型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-1-数据类型分类"><a href="#2-3-1-数据类型分类" class="headerlink" title="2.3.1 数据类型分类"></a>2.3.1 数据类型分类</h4><hr>

<p>JS把数据类型分为两类:</p>
<ul>
<li>简单数据类型( Number , String , Boolean, Undefined, Null )</li>
<li>复杂数据类型( object)</li>
</ul>
<p><strong>简单数据类型：</strong></p>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210126121517.png"></p>
<p><strong>数字型（Number）：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//num为数字型</span>
<span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10.0</span><span class="token comment">//num数字型</span>
<span class="token comment">//数字型最大值</span>
<span class="token keyword">var</span> num<span class="token operator">=</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span>
<span class="token comment">//数字型最小值</span>
<span class="token keyword">var</span> num<span class="token operator">=</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span>
<span class="token comment">//数字型三个特殊值</span>
<span class="token keyword">var</span> num<span class="token operator">=</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token operator">*</span><span class="token number">2</span><span class="token comment">//结果为Infinity</span>
<span class="token keyword">var</span> num<span class="token operator">=</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token operator">*</span><span class="token number">2</span><span class="token comment">//结果为-Infinity</span>
<span class="token keyword">var</span> num<span class="token operator">=</span>‘丁志君’<span class="token operator">-</span><span class="token number">12</span><span class="token comment">//结果为NaN</span>
<span class="token function">alert</span> <span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//Infinity ,代表无穷大,大于任何数值</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//-Infinity ,代表无穷小,小于任何数值</span>
<span class="token function">alert</span> <span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//Not a number ,代表一个非数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>字符串型（String）：</strong></p>
<p>字符串型可以是引号中的任意文本,其语法为双引号””和单引号”，因为HTML标签里面的属性使用的是双引号，JS这里我们更推荐使用单引号。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我爱北京天安门~"</span><span class="token punctuation">;</span> <span class="token comment">// 使用双引号表示字符串</span>
<span class="token keyword">var</span> strMsg2 <span class="token operator">=</span> <span class="token string">'我爱吃猪蹄~'</span><span class="token punctuation">;</span> <span class="token comment">// 使用单引号表示字符串</span>
<span class="token keyword">var</span> strMsg3 <span class="token operator">=</span> <span class="token string">'我爱吃"猪蹄"~'</span><span class="token punctuation">;</span> <span class="token comment">//‘ ’里面套“ ”</span>
<span class="token keyword">var</span> strMsg4 <span class="token operator">=</span> <span class="token string">"我爱吃'猪蹄'~"</span><span class="token punctuation">;</span> <span class="token comment">//" "里面套 ' '</span>
<span class="token comment">//常见错误</span>
<span class="token keyword">var</span> strMsg3 <span class="token operator">=</span>我爱大肘子<span class="token punctuation">;</span><span class="token comment">//报错，没使用引号,会被认为是js代码,但j s没有这些语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>布尔类型（boolean）：</strong></p>
<p>布尔类型有两个值: true和false ，其中true表示真(对) ，而false表示假(错)。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//布尔型</span>
<span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">//进行数学运算时，true代表的是1，false代表的是0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>未定义类型(Undefined):</strong></p>
<p>如果一个变量声明时未被赋值，则输出结果就是Undefined</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token operator">+</span><span class="token string">'pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Undefinedpink</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN(非数字) undefined 和数字相加最后的结果是NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>空值类型(null):</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token string">'pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nullpink</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p><strong>转义字符：</strong></p>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210126124701.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//字符串转义字符都是用 \ 开头但是这些转义字符写道引号里面</span>
varstr1<span class="token operator">=</span>“我是个<span class="token string">'高富帅'</span>的\n程序员"<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大大大大大大大大大\n小小小小小小小小小\n"收破烂啦~"'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-2-字符串length属性及拼接"><a href="#2-3-2-字符串length属性及拼接" class="headerlink" title="2.3.2 字符串length属性及拼接"></a>2.3.2 字符串length属性及拼接</h4><hr>

<p><strong>字符串长度属性：length</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token string">"丁志君"</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"石雨"</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>字符串拼接：</strong></p>
<p>多个字符串之间可以使用+进行拼接,其拼接方式为字符串+任何类型=拼接之后的新字符串</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token string">"丁志君"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"石雨"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token string">"喜欢"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//丁志君喜欢石雨2021</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment">//24</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment">//1212</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-3-获取变量数据类型"><a href="#2-3-3-获取变量数据类型" class="headerlink" title="2.3.3 获取变量数据类型"></a>2.3.3 获取变量数据类型</h4><hr>

<p>**typeof:**typeof可用来获取检测变量的数据类型</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//number</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"pink"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span>
<span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean</span>
<span class="token keyword">var</span> variable <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>
<span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span>
<span class="token comment">//prompt获取到的值是字符串型的</span>
<span class="token keyword">var</span> age<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-4-数据类型的转换"><a href="#2-3-4-数据类型的转换" class="headerlink" title="2.3.4 数据类型的转换"></a>2.3.4 数据类型的转换</h4><hr>

<p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量</p>
<p>的数据类型。通俗来说，就是把一种数据类型的变量转换成另外一种数据类型。</p>
<p>编程中通常有三种形式的转换：<strong>转换为字符串类型、转换为数字型、转换为布尔型</strong></p>
<h5 id="2-3-4-1-其他类型转换为字符串类型："><a href="#2-3-4-1-其他类型转换为字符串类型：" class="headerlink" title="2.3.4.1 其他类型转换为字符串类型："></a>2.3.4.1 其他类型转换为字符串类型：</h5><p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127112150.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-4-2-其他类型转换为数字类型："><a href="#2-3-4-2-其他类型转换为数字类型：" class="headerlink" title="2.3.4.2 其他类型转换为数字类型："></a>2.3.4.2 其他类型转换为数字类型：</h5><p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127112953.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"10.0"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"120px"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"rem120px"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//120</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10.0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Number</span>
<span class="token comment">//隐式转换</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>str <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"120"</span> <span class="token operator">-</span> <span class="token string">"110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"120"</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-4-3-其他类型转换为布尔类型："><a href="#2-3-4-3-其他类型转换为布尔类型：" class="headerlink" title="2.3.4.3 其他类型转换为布尔类型："></a>2.3.4.3 其他类型转换为布尔类型：</h5><blockquote>
<p>代表空、否定的值会被转换为false，如”、 0、NaN、 null undefined<br>其余值都会被转换为true</p>
</blockquote>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127143802.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-4-扩展内容"><a href="#2-4-扩展内容" class="headerlink" title="2.4 扩展内容"></a>2.4 扩展内容</h3><hr>

<p><strong>编译语言与解释语言的区别：</strong></p>
<blockquote>
<p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能</p>
<p>执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p>
</blockquote>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127145414.png"></p>
<ul>
<li><p>翻译器翻译的方式有两种: 一个是编译，另外一个是解释。两种方式之间的区别<strong>在于翻译的时间点不同</strong></p>
</li>
<li><p>编译器是在代码执行之前进行编译，生成中间代码文件（比如Java语言，执行代码时会用编译器编译成javac.class临时文件，当代码全部编译成javac.class文件后，再用解释器进行解释）</p>
</li>
<li><p>解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候,也称之为解释器)（比如JS语言，JS每读取一行代码，就直接被解释器解释）</p>
</li>
</ul>
<img src="2.JS学习.assets/QQ截图20210127150318.png" style="zoom:67%;" />



<p>类似于请客吃饭:</p>
<ul>
<li><strong>编译语言</strong>:首先把所有菜做好，才能上桌吃饭</li>
<li><strong>解释语言</strong>:好比吃火锅，边吃边涮，同时进行</li>
</ul>
<h3 id="2-5-运算符"><a href="#2-5-运算符" class="headerlink" title="2.5 运算符"></a>2.5 运算符</h3><hr>

<p>运算符( operator )也被称为操作符，用于实现赋值、比较和执行算数运算等功能的符号。</p>
<p>JS中常用运算符：<strong>算数运算符、递增和递减运算符、比较运算符、逻辑运算符、赋值运算符</strong></p>
<h4 id="2-5-1-算数运算符"><a href="#2-5-1-算数运算符" class="headerlink" title="2.5.1 算数运算符"></a>2.5.1 算数运算符</h4><p>概念:算术运算使用的符号，于执行两个变量或值的算术运算。</p>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127151506.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>浮点数计算时有精度问题：</strong></p>
<p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。<strong>不能直接用浮点数来判断是否相等</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.30000000000000004</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7.000000000000001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h4 id="2-5-2-自增与自减"><a href="#2-5-2-自增与自减" class="headerlink" title="2.5.2 自增与自减"></a>2.5.2 自增与自减</h4><blockquote>
<p>如果需要反复给数字变量添加或减去1 ,可以使用递增( ++ )和递减( – )运算符来完成。</p>
<p>在JavaScript中，递增( ++ )和递减( – )既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增(递减)运算符，放在变量后面时，我们可以称为后置递增(递减)运算符。</p>
<p><strong><font color=red>注意：递增和递减运算符必须和变量配合使用。</font></strong></p>
</blockquote>
<p><strong>递增：</strong></p>
<p>前置递增与后置递增单独使用时没有任何区别，但当他们用于其他情况时产生的结果就不一样了</p>
<p><strong>前置递增：</strong></p>
<p><strong><font color=red>先加1，后返回值。</font></strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token operator">++</span>age<span class="token punctuation">;</span><span class="token comment">//类似于age=age+1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>age <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>后置递增：</strong></p>
<p><strong><font color=red>先后返回原值，后加1。</font></strong></p>
<pre class="line-numbers language-none"><code class="language-none">var age&#x3D;10;
age++;&#x2F;&#x2F;类似于age&#x3D;age+1
console.log(age);&#x2F;&#x2F;11
console.log(age++ +10)&#x2F;&#x2F;20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-5-3-比较运算符"><a href="#2-5-3-比较运算符" class="headerlink" title="2.5.3 比较运算符"></a>2.5.3 比较运算符</h4><p>概念：比较运算符(关系运算符)是两个数据进行比较时所使用的运算符，比较运算后会返回一个布尔值( true / false </p>
<p>)作为比较运算的结果。</p>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127172258.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  左右的18数据类型不同</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-5-4-逻辑运算符"><a href="#2-5-4-逻辑运算符" class="headerlink" title="2.5.4 逻辑运算符"></a>2.5.4 逻辑运算符</h4><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断。</p>
<p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127173058.png"></p>
<p><strong>逻辑中断（短路与）：</strong></p>
<p>逻辑与短路运算：如果表达式1结果为真，则返回表达式2，如果表达式1为假，那么返回表达式1。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token operator">&amp;&amp;</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">23</span><span class="token operator">&amp;&amp;</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">23</span><span class="token operator">&amp;&amp;</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token operator">&amp;&amp;</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">23</span><span class="token operator">&amp;&amp;</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>逻辑中断（短路或）：</strong></p>
<p>逻辑或短路运算：如果表达式1结果为真，则返回的是表达式1，如果表达式1结果为假，则返回表达式2</p>
<pre class="line-numbers language-none"><code class="language-none">console.log(123||456);&#x2F;&#x2F;123
console.log(0||456);&#x2F;&#x2F;456
console.log(0||4*56);&#x2F;&#x2F;4*56
console.log(null||4*56);&#x2F;&#x2F;4*56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-3-5-赋值运算符"><a href="#2-3-5-赋值运算符" class="headerlink" title="2.3.5 赋值运算符"></a>2.3.5 赋值运算符</h4><p><img src="2.JS%E5%AD%A6%E4%B9%A0.assets/QQ%E6%88%AA%E5%9B%BE20210127175054.png"></p>
<h3 id="2-6-流程控制"><a href="#2-6-流程控制" class="headerlink" title="2.6 流程控制"></a>2.6 流程控制</h3><hr>

<p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码<br>的执行顺序来实现我们要完成的功能。</p>
<p>简单理解:流程控制就是来控制我们的代码按照什么结构顺序来执行</p>
<p>流程控制主要有三种结构，分别是<strong>顺序结构、分支结构和循环结构</strong>， 这三种结构代表三种代码执行的顺序。</p>
<img src="2.JS学习.assets/QQ截图20210127175851.png" style="zoom:67%;" />

<p><strong>顺序流程控制</strong>：顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行。</p>
<p><strong>分支流程控制：</strong>由上到下执行代码的过程中，根据不同的条件,执行不同的路径代码(执行代码多选-的过程) ，从而得到不同的结果</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//条件成立时执行的代码语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//条件成立时的语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//条件不成立时的表达式</span>
<span class="token punctuation">&#125;</span>
<span class="token number">2.</span>执行思路如果<span class="token keyword">if</span>里面的条件表达式结果为真<span class="token boolean">true</span>，则执行大括号里面的执行语句。如果<span class="token keyword">if</span>条件表达式结果为假，则不执行大括号里面的语句，则执行<span class="token keyword">if</span>语句后面的代码。
<span class="token comment">//if语句</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
<span class="token comment">//if else语句</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你不好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
   <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>三元表达式：</strong>条件表达式？表达式1 ：表达式2</p>
<p>如果条件表达式结果为真，则返回表达式1的值，如果条件表达式结果为假，则返回表达式2的值</p>
<pre class="line-numbers language-none"><code class="language-none">var num&#x3D;10;
num&gt;5 ? &#39;是的&#39;:&#39;不是的&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p><strong>分支流程控制语句：</strong></p>
<p>switch语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项</p>
<p>时，就可以使用switch。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法结构,break不可省略</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> value1<span class="token operator">:</span> 
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> value2<span class="token operator">:</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">default</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//实例，break不可省略,case值与switch值必须全等（即类型与数值都相等）</span>
<span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
       <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">;</span>
        console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'啥也不是'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-7-循环控制"><a href="#2-7-循环控制" class="headerlink" title="2.7 循环控制"></a>2.7 循环控制</h3><hr>

<p><strong>三种主要循环：for循环、while循环、do while循环</strong></p>
<p>在程序中，一组被重复执行的语句被称之 为循环体，能否继续重复执行，取决于循环的终止条件。由循环体</p>
<p>及循环的终止条件组成的语句，被称之为循环语句</p>
<h4 id="2-7-1-for循环"><a href="#2-7-1-for循环" class="headerlink" title="2.7.1 for循环"></a>2.7.1 for循环</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法结构</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>循环表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//循环语句</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//实例</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//求班级学生平均成绩案例</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入班级人数：'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个同学的成绩'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> average <span class="token operator">=</span> sum <span class="token operator">/</span> num<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>双重for循环</strong></p>
<p>很多情况下，单层for循环并不能满足我们的需求，比如我们要打印一个5行5列的图形、打印一个倒直角三角形</p>
<p>等，此时就可以通过循环嵌套来实现。**<font color=skyblue>循环嵌套</font>**是指在一个循环语句中再定义一个循环语句的语法结构，例如在</p>
<p>for循环语句中，可以再嵌套一个for循环，这样的for循环语句我们称之为双重for循环。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//双重for循环语法结构</span>
<span class="token comment">//外循环一次，里循环执行全部</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>外层初始化变量<span class="token punctuation">;</span>外层条件表达式<span class="token punctuation">;</span>外层的操作表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>里层初始化变量<span class="token punctuation">;</span>里层条件表达式<span class="token punctuation">;</span>里层的操作表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//循环语句</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'外循环执行'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'次'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'内循环执行'</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">'次'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token comment">//打印五行五列</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">'\n'</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打印九九乘法表</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  str <span class="token operator">=</span> str <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'x'</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> i <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
  str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-7-2-while循环"><a href="#2-7-2-while循环" class="headerlink" title="2.7.2 while循环"></a>2.7.2 while循环</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法结构   当    成立的是时候，执行循环语句</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      循环体
      <span class="token punctuation">&#125;</span>
<span class="token comment">//当表达式结果为true时，执行循环体，否则则退出</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入年龄'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token keyword">while</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'未成年人禁止入内！'</span><span class="token punctuation">)</span>
  age<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//防止死循环</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-7-3-do-while循环"><a href="#2-7-3-do-while循环" class="headerlink" title="2.7.3 do while循环"></a>2.7.3 do while循环</h4><p>do… while语句其实是while语句的一一个变体。该循环会先执行次代码块 ，然后对条件表达式进行判断，如果条件</p>
<p>为真，就会重复执行循环体，否则退出循环。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//do while循环语法结构</span>
<span class="token keyword">do</span><span class="token punctuation">&#123;</span>
<span class="token comment">//循环体</span>
<span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>
    <span class="token comment">//与while循环的不同之处在于它会先执行一遍循环体再执行条件表达式，如果条件为真，则继续执行，如果条件为假，则退出循环</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入年龄'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'禁止'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  age<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-7-4-continue关键字"><a href="#2-7-4-continue关键字" class="headerlink" title="2.7.4 continue关键字"></a>2.7.4 continue关键字</h4><p>continue关键宇用于立即跳出本次循环，继续下一次循环(本次循环体中continue之后的代码就会少执行一次)。例</p>
<p>如，吃5个包子，第3个有子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-7-5-break关键字"><a href="#2-7-5-break关键字" class="headerlink" title="2.7.5 break关键字"></a>2.7.5 break关键字</h4><p>break关键字用于立即跳出整个循环(循环结束)。例如,吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正在吃第'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'个包子'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-8-数组"><a href="#2-8-数组" class="headerlink" title="2.8 数组"></a>2.8 数组</h3><hr>

<p>数组是指一组数据的集合 ，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组</p>
<p>数据存储在单个变量名 下的优雅方式。 数组可以把一组相关的数据一 起存放，并提供方便的访问(获取)方式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数组：即一组数据的集合，储存在单个变量下的优雅方式</span>
<span class="token comment">//利用new创建数组</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Arrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空数组</span>
<span class="token comment">//使用数组字面量来创建数组</span>
<span class="token keyword">var</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//空数组</span>
<span class="token keyword">var</span> arr1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hahaha'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>数组的字面量是方括号[ ]，声明数组并赋值称为数组的初始化。</p>
<h4 id="2-8-1数组的访问"><a href="#2-8-1数组的访问" class="headerlink" title="2.8.1数组的访问"></a>2.8.1数组的访问</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了一个空数组</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'钉钉'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 5, "钉钉"]0: 1</span>
<span class="token comment">/*
1: 2
2: 5
3: "钉钉"
length: 4
__proto__: Array(0)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>数组的索引：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了一个空数组</span>
arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'钉钉'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h4 id="2-8-2数组的遍历"><a href="#2-8-2数组的遍历" class="headerlink" title="2.8.2数组的遍历"></a>2.8.2数组的遍历</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'迪丽热巴'</span><span class="token punctuation">,</span> <span class="token string">'鹿晗'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'迪丽热巴', '鹿晗', 1, 2</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//案例，求数组和及平均数</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
  <span class="token keyword">var</span> average <span class="token operator">=</span> sum <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多结果输出</span>

<span class="token comment">//求数组中最大值</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-8-3-spilt的使用方法"><a href="#2-8-3-spilt的使用方法" class="headerlink" title="2.8.3 spilt的使用方法"></a>2.8.3 spilt的使用方法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'nihao nihaoma 1'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过' '将字符串切割为数组</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-8-4-数组属性的修改"><a href="#2-8-4-数组属性的修改" class="headerlink" title="2.8.4 数组属性的修改"></a>2.8.4 数组属性的修改</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//修改数组长度（扩容数组）</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>
arr<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//扩容数组</span>

<span class="token comment">//修改数组索引</span>
arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//新增元素</span>
arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//新增元素</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//修改索引为1的元素</span>

<span class="token comment">//修改数组的数据类型</span>
arr<span class="token operator">=</span><span class="token string">'优点意思'</span><span class="token comment">//不能直接给数名复制，否则会替换掉之前数组中的内容。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有点意思</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-8-5-数组实操"><a href="#2-8-5-数组实操" class="headerlink" title="2.8.5 数组实操"></a>2.8.5 数组实操</h4><ul>
<li><strong>筛选出大于10 的数组元素</strong></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">var</span> newarr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       newarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
       j<span class="token operator">++</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> newarr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><strong>删除指定数组元素</strong></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newarr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  newarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  j<span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> newarr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><strong>翻转数组</strong></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   newarr<span class="token punctuation">[</span>newarr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p><strong>冒泡排序</strong></p>
<p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就</p>
<p>把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算</p>
<p>法的名字由来是因为越小的元素会经由交换慢慢浮“到数列的顶端。</p>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//外层循环管趟数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//内层循环管交换次数</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
   arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-9-函数"><a href="#2-9-函数" class="headerlink" title="2.9 函数"></a>2.9 函数</h3><hr>

<p>在JS里面,可能会定义非常多的相同代码或者功能相似的代码,这些代码可能需要大量重复使用。虽然for循环语句也</p>
<p>能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用JS中的函数。</p>
<p><strong><font color=red>函数</font></strong>:就是封装了一段<font color=red>可被重复调用执行的代码块</font>。通过此代码块可以实现大量代码的重复使用。</p>
<h4 id="2-9-1-函数的使用"><a href="#2-9-1-函数的使用" class="headerlink" title="2.9.1 函数的使用"></a>2.9.1 函数的使用</h4><blockquote>
<p> 函数的使用分为两部分：<strong>声明函数和调用函数</strong></p>
</blockquote>
<p><strong>函数的使用：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明函数方法一</span>
<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//函数体（代码块）</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//实例</span>
<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
consolge<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//声明函数方法二</span>
<span class="token keyword">var</span> <span class="token function-variable function">变量名</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//实例</span>
<span class="token keyword">var</span> <span class="token function-variable function">fun</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是函数表达式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：</p>
<ul>
<li>function为声明函数的关键字，全部为小写</li>
<li>函数是做某件事情，函数名一般为动词</li>
<li>函数如果不被调用，自己是无法执行的</li>
</ul>
<p><strong>函数的调用：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//函数名（）</span>
<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//实例</span>
<span class="token comment">//声明函数</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用函数</span>
 <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：</p>
<p>调用函数时一定要加();</p>
<h4 id="2-9-2-函数的封装"><a href="#2-9-2-函数的封装" class="headerlink" title="2.9.2 函数的封装"></a>2.9.2 函数的封装</h4><p>函数的封装是把一个或者多 个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p>
<img src="2.JS学习.assets/QQ截图20210203204825.png" style="zoom:67%;" />



<h4 id="2-9-3-函数的参数"><a href="#2-9-3-函数的参数" class="headerlink" title="2.9.3 函数的参数"></a>2.9.3 函数的参数</h4><p><strong>形参与实参：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//函数声明时，（）里是形参</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span>形参<span class="token number">3</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//代码块</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用时，传递的为实参</span>
<span class="token keyword">function</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//food为形参</span>
    
<span class="token punctuation">&#125;</span>
<span class="token function">food</span><span class="token punctuation">(</span><span class="token string">'西红柿炒鸡蛋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//西红柿炒鸡蛋为实参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-9-4-函数形参与实参不匹配问题"><a href="#2-9-4-函数形参与实参不匹配问题" class="headerlink" title="2.9.4 函数形参与实参不匹配问题"></a>2.9.4 函数形参与实参不匹配问题</h4><p>在JS中，形参的默认值为undefinded。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//3</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//NaN</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-9-5-函数的返回值return"><a href="#2-9-5-函数的返回值return" class="headerlink" title="2.9.5 函数的返回值return"></a>2.9.5 函数的返回值return</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//函数的返回值格式</span>
<span class="token comment">//function 函数名()&#123;</span>
<span class="token keyword">return</span> 需要返回的值
<span class="token punctuation">&#125;</span>
<span class="token comment">//函数知只是实现某种功能，最终的结果需要返回给函数的调用者</span>
<span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-9-6-return使用时的注意事项"><a href="#2-9-6-return使用时的注意事项" class="headerlink" title="2.9.6 return使用时的注意事项"></a>2.9.6 return使用时的注意事项</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.return为终止位置，return之后的代码不会被执行</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会被执行，return之后的代码不会被执行</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//2.return只能返回一个值</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> num1<span class="token punctuation">,</span>num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token comment">//只返回num1+num2的结果</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//3.如果函数中有return，则返回return后的值，如果没有则返回undefined</span>
<span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">666</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回666</span>

<span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>
<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-9-7-argument的使用"><a href="#2-9-7-argument的使用" class="headerlink" title="2.9.7 argument的使用"></a>2.9.7 argument的使用</h4><blockquote>
<p>当我们不确定有多少个参数传递的时候，可以用arguments来获取。在JavaScript中， arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个arguments对象， arguments对象中存储了传递的所有实参。</p>
</blockquote>
<p><strong>argument的使用：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token comment">//里面存储了所有传递过来的实参</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//返回[1,2,3,4]伪数组</span>


<span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>伪数组：</strong></p>
<ul>
<li><p>具有数组的length属性</p>
</li>
<li><p>按照数组的索引进行存储</p>
</li>
<li><p>没有真正数组的一些方法，比如pop()、push()</p>
</li>
</ul>
<h4 id="2-9-8-函数封装冒泡排序"><a href="#2-9-8-函数封装冒泡排序" class="headerlink" title="2.9.8 函数封装冒泡排序"></a>2.9.8 函数封装冒泡排序</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
   arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
   <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-0-作用域"><a href="#3-0-作用域" class="headerlink" title="3.0 作用域"></a>3.0 作用域</h3><hr>

<p>通常来说,，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个</p>
<p>名字的作用域。作用域的使用提高了程序逻辑的局部性,增强了程序的可靠性,减少了名字冲突。</p>
<h4 id="2-0-1-全局变量与局部变量"><a href="#2-0-1-全局变量与局部变量" class="headerlink" title="2.0.1 全局变量与局部变量"></a>2.0.1 全局变量与局部变量</h4><p><strong>JS的作用域：</strong>全局作用域、局部作用域</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局作用域（在整个代码中都会起作用）</span>
<span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//在函数内部就是局部作用域，只在函数内部起作用</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">var</span> num1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从执行效率来看全局变量和局部变量</p>
<ul>
<li><p>全局变量只有浏览器关闭的时候才会销毁，比较占内存资源</p>
</li>
<li><p>局部变量当我们程序执行完毕就会销毁， 比较节约内存资源 </p>
</li>
</ul>
<h4 id="3-0-1-块级作用域"><a href="#3-0-1-块级作用域" class="headerlink" title="3.0.1 块级作用域"></a>3.0.1 块级作用域</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-1-预解析"><a href="#3-1-预解析" class="headerlink" title="3.1 预解析"></a>3.1 预解析</h3><hr>
JS引擎运行JS代码时分为：预**解析、代码执行**

<p>预解析JS引擎会把JS里面所有的var还有function，提升到当前作用域的最前面。</p>
<blockquote>
<p>预解析分为：<strong>变量预解析(变量提升 )<strong>和</strong>函数预解析( 函数提升)</strong></p>
<p>变量提升：就是把所有的变量声明提升到当前的作用域最前面不提升赋值操作</p>
<p>函数提升：就是把所有的函数声明提升到当前作用域的最前面但不调用函数</p>
</blockquote>
<p><strong>须注意点：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//情形一</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果报错</span>
<span class="token comment">//情形二  变量提升var num提升到最前边，但不提升赋值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为undefined</span>
<span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//情形三   函数提升</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为10</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//情形四   变量提升，提升var fun,但不提升后边的function（）</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果报错</span>
<span class="token keyword">var</span> <span class="token function-variable function">fun</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-2-JS对象（Object）"><a href="#3-2-JS对象（Object）" class="headerlink" title="3.2 JS对象（Object）"></a>3.2 JS对象（Object）</h3><hr>

<p><strong>什么是对象？</strong></p>
<p>现实生活中：万物皆对象，对象是一个具体的事物 ，看得见摸得着的实物。例如，一本书、一辆汽车、 一个人</p>
<p>可以是”对象”，一个数据库、一张网页、 一个与远程服务器的连接也可以是“对象”。</p>
<blockquote>
<p>在JavaScript中，对象是一组无序的相关属性和方法的集合 ，所有的事物都是对象，例如字符串、 数值、数</p>
<p>组、函数等。对象是由属性和方法组成的。</p>
<ul>
<li>属性:事物的特征，在对象中用属性来表示(常用名词)</li>
<li>方法:事物的行为，在对象中用方法来表示(常用动词)</li>
</ul>
</blockquote>
<p><strong>为什么需要对象？</strong></p>
<p>保存一个值时，可以使用变量，保存多个值( 一组值)时，可以使用数组。如果要保存一个人的完整信息（身高、体重和、年龄等属性）呢?</p>
<p>例如：</p>
<p>用数组储存丁志君的各种属性</p>
<blockquote>
<p>var person=[‘丁志君’,’’男,21,175,147];//不合适，表述不清楚</p>
</blockquote>
<p>用对象储存丁志君的属性</p>
<blockquote>
<p>dingzhijun.名字= ‘丁志君’；          person.name=’丁志君’；</p>
<p>dingzhijun.性别=’男’；                   person.sex=’男’； </p>
<p>dingzhijun.年龄=21 ;                         person.age=21 ;     </p>
<p>dingzhijun.身高=175;                         person.height=175;        </p>
</blockquote>
<h4 id="3-1-1-创建对象的三种方式"><a href="#3-1-1-创建对象的三种方式" class="headerlink" title="3.1.1 创建对象的三种方式"></a>3.1.1 创建对象的三种方式</h4><ul>
<li><strong>利用字面量创建对象</strong></li>
</ul>
<p>**<font color=red>对象字面量：</font>**即花括号{}里面包含了表达这个具体事物（对象 ）的属性和方法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//键值对的形式，多个属性之后用 ， 隔开</span>
      uname<span class="token operator">:</span> <span class="token string">'丁志君'</span><span class="token punctuation">,</span>
      age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
      uheight<span class="token operator">:</span> <span class="token number">175</span><span class="token punctuation">,</span>
      uweight<span class="token operator">:</span> <span class="token number">147</span><span class="token punctuation">,</span>
    <span class="token comment">//方法冒号后面跟匿名函数</span>
      <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是'</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">'呀！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>
<span class="token comment">//调用对象中的方法</span>
obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调用对象中的属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//第二种调用方式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>利用new object创建对象</strong></li>
</ul>
<p>**<font color=red>new object创建对象：</font>**与创建数组 new Arrary（）原理类似</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//添加属性</span>
obj<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">'丁志君'</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>uheight <span class="token operator">=</span> <span class="token number">175</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是'</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">'呀！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>利用构造函数来创造对象</strong></li>
</ul>
<p>使用上述两种方法一次只能创建一个对象，具有一定的局限性，因此可以利用函数的方法将属性封装如函数中，即为构造函数。</p>
<blockquote>
<p>构造函数：将对象里面相同的属性和方法抽象出来封装到函数里</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用方法</span>
<span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">属性<span class="token number">1</span><span class="token punctuation">,</span>属性<span class="token number">2</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>属性<span class="token number">1</span><span class="token operator">=</span>属性<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>属性<span class="token number">2</span><span class="token operator">=</span>属性<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//调用</span>
<span class="token keyword">new</span> <span class="token class-name">start</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span>实参<span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>'刘德华
<span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">'男'</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sang</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sang</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sang<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> ldh<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">start</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> ldh<span class="token punctuation">)</span><span class="token comment">//object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment">//18</span>
ldh<span class="token punctuation">.</span><span class="token function">sang</span><span class="token punctuation">(</span><span class="token string">'冰雨'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-1-2-遍历对象"><a href="#3-1-2-遍历对象" class="headerlink" title="3.1.2 遍历对象"></a>3.1.2 遍历对象</h4><p>for - in 遍历对象</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>变量<span class="token keyword">in</span>对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">//实例</span>
<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>
name<span class="token operator">:</span><span class="token string">'丁志君'</span><span class="token punctuation">;</span>
age<span class="token operator">:</span><span class="token number">18</span>
sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为属性名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果为属性值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-3-JS内置对象"><a href="#3-3-JS内置对象" class="headerlink" title="3.3 JS内置对象"></a>3.3 JS内置对象</h3><hr>
JS中的对象分为:内置对象 、自定义对象、浏览器对象

<blockquote>
<p> 内置对象：指JS语言自带的对象，这些对象供开发者使用，并提供了一些常用的或是最基本必要的功能</p>
</blockquote>
<h4 id="3-3-1-查阅文档"><a href="#3-3-1-查阅文档" class="headerlink" title="3.3.1 查阅文档"></a>3.3.1 查阅文档</h4><p><strong>MDN：</strong><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<h4 id="3-3-2-内置对象Math"><a href="#3-3-2-内置对象Math" class="headerlink" title="3.3.2 内置对象Math"></a>3.3.2 内置对象Math</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//内置对象Math的几种方法</span>
Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token comment">//圆周率</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向下取整</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上取整</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//四舍五入取整</span>
Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绝对值</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大值</span>
Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最小值</span>
Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回一个[0,1)之间的随机数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-3-3-内置对象Date"><a href="#3-3-3-内置对象Date" class="headerlink" title="3.3.3 内置对象Date"></a>3.3.3 内置对象Date</h4><p><strong>日期对象必须通过构造函数来创建</strong>（即通过new关键字来创建）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//构造日期对象函数</span>
<span class="token comment">//若Date（）里无参数，则返回系统的当前时间</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//若有参数，在参数写法如下</span>
<span class="token keyword">var</span> date1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数字型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的是3月，不是2月</span>
<span class="token keyword">var</span> date1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2020-2-22 8:8:8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的是2月</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>格式化日期格式</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前日期的年</span>
<span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前月份，不过返回的月份比当前的月份小一个月（国外原因），因此需要加1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222114426.png"></p>
<p><strong>获得时间戳</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得现在到1970年的毫秒数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得现在到1970年的毫秒数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得现在到1970年的毫秒数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>时间戳转换为时分秒格式</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> nowTime<span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前的毫秒数（时间戳）</span>
<span class="token keyword">var</span> times<span class="token operator">=</span>nowTime<span class="token operator">/</span><span class="token number">1000</span><span class="token comment">//获取总的秒数</span>
<span class="token keyword">var</span> day<span class="token operator">=</span><span class="token function">parsentInt</span><span class="token punctuation">(</span>times<span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取天数（整数）</span>
<span class="token keyword">var</span> hours<span class="token operator">=</span><span class="token function">parsentInt</span><span class="token punctuation">(</span>times<span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">%</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取小时数（整数）</span>
<span class="token keyword">var</span> mintues<span class="token operator">=</span><span class="token function">parsentInt</span><span class="token punctuation">(</span>times<span class="token operator">/</span><span class="token number">60</span><span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取分钟数（整数）</span>
<span class="token keyword">var</span> seconds<span class="token operator">=</span><span class="token function">parsentInt</span><span class="token punctuation">(</span>times<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前秒数（整数）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-3-4-内置对象Array"><a href="#3-3-4-内置对象Array" class="headerlink" title="3.3.4 内置对象Array"></a>3.3.4 内置对象Array</h4><p><strong>检测是否为数组</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//对象</span>
cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true 为数组</span>
cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false 不为数组</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ture 为数组</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false 不为数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>在数组末尾添加数组元素</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'丁'</span><span class="token punctuation">)</span><span class="token comment">//在数组末尾新增两个数组元素，返回数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>在数组开头添加数组元素</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'丁'</span><span class="token punctuation">)</span><span class="token comment">//在数组开头新增两个数组元素，返回数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>删除数组的最后一个元素</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除数组最后一个元素，一次只能删除一个，返回的结果为被删除的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>删除数组的第一个元素</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除数组第一个元素，一次只能删除一个，返回的结果为被删除的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>数组排序</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
Array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组翻转3,2,1</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组排序2,3,4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>数组索引</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回结果为0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找不到元素，返回结果为-1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">latindexOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从后面开始查找，但结果不变，返回结果为0（与indexOf（）效果一样）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>数组转换为字符串</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222141855.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,2,3 使用toString（）转化</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,2,3 使用join（）转化</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1-2-3 使用join（）转化，可自定义分隔符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>其他方法</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222142234.png"></p>
<h4 id="3-3-5-内置对象字符串"><a href="#3-3-5-内置对象字符串" class="headerlink" title="3.3.5 内置对象字符串"></a>3.3.5 内置对象字符串</h4><p><strong>基本包装数据类型</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'ding'</span><span class="token punctuation">;</span>
<span class="token comment">//把简单数据类型包装成为复杂数据类型</span>
<span class="token keyword">var</span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'ding'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//把临时变量赋值给str</span>
str<span class="token operator">=</span>temp<span class="token punctuation">;</span>
<span class="token comment">//销毁临时变量</span>
temp<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>字符串不可变性</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'ding'</span><span class="token punctuation">;</span>
str<span class="token operator">=</span><span class="token string">'shiyu'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//shiyu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>字符串的不可变指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，每次对字符串的操作完成都会返回一个新的字符串（开辟了一个新的地址）。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">var str&#x3D;&#39;&#39;;
for(var i&#x3D;0;i&lt;10000000;i++)&#123;
str+&#x3D;i
&#125;
console.log(str);&#x2F;&#x2F;这个结果需要计算很久，非常消耗电脑内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>根据字符返回字符的位置</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222143734.png"></p>
<p><strong>字符串操作方法</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222144947.png"></p>
<h3 id="3-4-简单数据类型与复杂数据类型"><a href="#3-4-简单数据类型与复杂数据类型" class="headerlink" title="3.4 简单数据类型与复杂数据类型"></a>3.4 简单数据类型与复杂数据类型</h3><p>简单类型又叫做基本数据类型或者<strong>值类型</strong>，复杂类型又叫做引用类型。</p>
<ul>
<li><p><strong>值类型</strong>︰简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型。string , number</p>
<p> , boolean , undefined , null。其中简单数据类型null返回的是一个空的对象object</p>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> times<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><p><strong>引用类型</strong>∶复杂数据类型，在存储时变量中存储的仅仅是地址(引用)，因此叫做引用数据类型通过new关键字</p>
<p>创建的对象（系统对象、自定义对象），如Object、Array、Date等</p>
</li>
</ul>
<h4 id="3-4-1-堆和栈"><a href="#3-4-1-堆和栈" class="headerlink" title="3.4.1 堆和栈"></a>3.4.1 堆和栈</h4><p><strong>堆空间和栈空间分配区别</strong></p>
<blockquote>
<p> 1、栈(操作系统）︰由<strong>操作系统自动分配</strong>释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈。<strong>简单数据类型存放到栈里面</strong></p>
<p>2、堆（操作系统）∶存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。<strong>复杂数据类型存放到堆里面</strong></p>
</blockquote>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222165446.png"></p>
<h4 id="3-4-2-简单数据类型内存分配"><a href="#3-4-2-简单数据类型内存分配" class="headerlink" title="3.4.2 简单数据类型内存分配"></a>3.4.2 简单数据类型内存分配</h4><blockquote>
<p>值类型（简单数据类型) : string , number , boolean , undefined , null</p>
<p>值类型变量的数据直接存放在变量(栈空间)中</p>
<p>简单数据类型直接存放在栈中，存放的是值。如下图中的age就是简单数据类型</p>
</blockquote>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222165758.png"></p>
<blockquote>
<p>引用类型(复杂数据类型)∶通过new关键字创建的对象（系统对象、自定义对象），如Object、Array、Date等。</p>
<p>引用类型变量（栈空间)里存放的是地址，真正的对象实例存放在堆空间中</p>
<p>复杂数据类型首先在栈中存放地址（十六进制表示），然后这个地址再指向堆中的值。如下图中的数组。</p>
</blockquote>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222170154.png"></p>
<h4 id="3-4-3-简单数据类型传参"><a href="#3-4-3-简单数据类型传参" class="headerlink" title="3.4.3 简单数据类型传参"></a>3.4.3 简单数据类型传参</h4><p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222170556.png"></p>
<h4 id="3-4-4-复杂数据类型传参"><a href="#3-4-4-复杂数据类型传参" class="headerlink" title="3.4.4 复杂数据类型传参"></a>3.4.4 复杂数据类型传参</h4><p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222190806.png"></p>
<h3 id="3-5-WebAPIs"><a href="#3-5-WebAPIs" class="headerlink" title="3.5 WebAPIs"></a>3.5 WebAPIs</h3><h4 id="3-5-1-Web-APIs与JS基础的关联性"><a href="#3-5-1-Web-APIs与JS基础的关联性" class="headerlink" title="3.5.1 Web APIs与JS基础的关联性"></a>3.5.1 Web APIs与JS基础的关联性</h4><p><strong>JS的组成：</strong></p>
<p><strong>在JS基础阶段学习的主要是ECMAScript，而Web APIs阶段主要学习DOM和BOM。</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222191113.png"></p>
<p><strong><font color=red>JS的基础阶段：</font></strong></p>
<ul>
<li><p>学习的是ECMAscript标准规定的基本语法</p>
</li>
<li><p>要求掌握Js基础语法</p>
</li>
<li><p>只学习基本语法，做不了常用的网页交互效果</p>
</li>
<li><p>目的是为了Js 后面的课程判基础、做铺垫</p>
</li>
</ul>
<p><strong><font color=red>Web APIs阶段：</font></strong></p>
<ul>
<li><p>web APIs是w3c组织的标准</p>
</li>
<li><p>web APIs 主要学习DOM和BOM</p>
</li>
<li><p>web APIs是JS所独有的部分</p>
</li>
<li><p>主要学习页面交互功能</p>
</li>
<li><p>需要使用Js基础的课程内容做基础</p>
</li>
</ul>
<p>JS基础学习ECMAscript基础语法为后面作铺垫，web APIs是JS的应用，大量使用JS基础语法做交互效果</p>
<h4 id="3-5-2-API与Web-API"><a href="#3-5-2-API与Web-API" class="headerlink" title="3.5.2 API与Web API"></a>3.5.2 API与Web API</h4><p><strong><font color=red>API：</font></strong></p>
<p>APl( Application Programming Interface,应用程序编程接口)是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<p>简单理解︰**<font color=red>API是给程序员提供的一种工具，以便能更轻松的实现想要完成的功能。</font>**</p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222192232.png"></p>
<p><strong><font color=red>Web API：</font></strong></p>
<p>Web API是浏览器提供的一套操作浏览器功能和页面元素的API( BOM和DOM)。现阶段我们主要针对于浏览器讲</p>
<p>解常用的API，主要针对浏览器做交互效果。</p>
<p>比如我们想要浏览器弹出一个警示框，直接使用alert(‘弹出’)</p>
<p>MDN API参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p>
<p><strong>总结：</strong></p>
<ul>
<li>API是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部何实现.</li>
<li>Web API主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</li>
<li>Web API一般都有输入和输出（函数的传参和返回值），Web API很多都是方法（函数），比如alert()方法。</li>
<li>学习Web API可以结合前面学习内置对象方法的思路学习</li>
</ul>
<h3 id="3-6-DOM"><a href="#3-6-DOM" class="headerlink" title="3.6 DOM"></a>3.6 DOM</h3><p><strong>什么是DOM：</strong></p>
<p>文档对象模型(Document Object Model，简称DOM)，是W3C组织推荐的处理**可扩展标记语言(**HTML或者XML </p>
<p>)的标准<strong>编程接口</strong>。</p>
<p>W3C已经定义了一系列的DOM接口，通过这些DOM接口可以改变网页的内容、结构和样式。</p>
<p><strong>DOM树：</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210222193953.png"></p>
<p><strong>文档</strong>：一个页面就是一个文档，DOM中使用document表示</p>
<p><strong>元素</strong>：页面中的所有标签都是元素，DOM中使用element表示</p>
<p><strong>节点</strong>︰网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</p>
<h4 id="3-6-1-获取元素"><a href="#3-6-1-获取元素" class="headerlink" title="3.6.1 获取元素"></a>3.6.1 获取元素</h4><blockquote>
<p>DOM在我们实际开发中主要用来操作元素。</p>
</blockquote>
<p>如何来获取页面中的元素呢?</p>
<p>获取页面中的元素可以使用以下几种方式:</p>
<ul>
<li><p>根据ID获取</p>
</li>
<li><p>根据标签名获取</p>
</li>
<li><p>通过HTML5新增的方法获取</p>
</li>
<li><p>特殊元素获取</p>
</li>
</ul>
<h5 id="3-6-1-1-根据ID获取元素"><a href="#3-6-1-1-根据ID获取元素" class="headerlink" title="3.6.1.1 根据ID获取元素"></a>3.6.1.1 根据ID获取元素</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'time'</span><span class="token operator">></span>钉子君<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 因为<span class="token constant">HTML</span>文档是从上往下依次读取，因此获取元素时，需要先有标签，才能写script，因此要写到标签下面 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token comment">//get 获得 Elemnet 元素 BYId 通过Id 驼峰命名法</span>
<span class="token comment">//里面的参数是大小写敏感的字符串</span>
<span class="token comment">//返回的元素是一个对象</span>
<span class="token keyword">var</span> timer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回结果 &lt;div id='time'>钉子君&lt;/div></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>
<span class="token comment">//打印我们返回的元素对象，更好的查看里面的属性和方法</span>
console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-6-1-2-根据标签名获取"><a href="#3-6-1-2-根据标签名获取" class="headerlink" title="3.6.1.2 根据标签名获取"></a>3.6.1.2 根据标签名获取</h5><p>使用getElementsByTagName()方法可以返回带有指定标签名的对象的集合。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">     <span class="token operator">&lt;</span>ol<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>作业雨疏风骤，浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>作业雨疏风骤，浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>作业雨疏风骤，浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>
<span class="token comment">//返回的是获取过来元素对象的集合以伪数组的形式存储的</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取第一个li标签里的内容 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取第一个li标签里的内容</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//如果页面中只有一个li返回的还是伪数组的形式</span>

<span class="token comment">//如果页面中没有这个元素返回的空的伪数组的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。<strong>得到元素对象是动态的</strong></p>
<p><strong>获取某一父元素内指定的子元素</strong></p>
<ul>
<li>复杂版：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>ol<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>
    <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>

<span class="token comment">//如果想获取的是ol里面的li标签，而不要ul里面的</span>
<span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先通过ol标签名获取所有ol标签（存入数组中），又因为文档中只有一个ol标签，因此数组中的下标为0返回的是一个数组对象 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//再通过ol[0]获得整个ol标签，最后通过父元素来获得li标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>简单版：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ol id<span class="token operator">=</span><span class="token string">'ol'</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>
<span class="token operator">&lt;</span>ul<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>浓睡不消残酒<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
  <span class="token comment">//为父元素加个id，通过id获取父元素对象</span>
 <span class="token keyword">var</span> ol<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//再通过父元素对象，获得子元素标签</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-6-1-3-H5新增获取元素"><a href="#3-6-1-3-H5新增获取元素" class="headerlink" title="3.6.1.3 H5新增获取元素"></a>3.6.1.3 H5新增获取元素</h5><p><strong>通过类名获得标签元素</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span>盒子<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span>盒子<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token comment">//根据类名获取元素</span>
<span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'box1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>H5新增方法（query’Selector）</strong></p>
<p>返回指定选择器的第一个元素对象</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>盒子<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>盒子<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>ol id<span class="token operator">=</span><span class="token string">'ol'</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>
<span class="token comment">//H5新增方法querySelector</span>
 <span class="token keyword">var</span> firstbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类选择器</span>
 <span class="token keyword">var</span> firstol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id选择器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>返回指定选择器的所有对象</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>盒子<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>盒子<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>ol id<span class="token operator">=</span><span class="token string">'ol'</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>昨夜雨疏风骤<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>
<span class="token comment">//H5新增方法querySelector</span>
 <span class="token keyword">var</span> firstbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类选择器</span>
 <span class="token keyword">var</span> firstol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'#ol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id选择器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="3-6-1-3-获取body元素"><a href="#3-6-1-3-获取body元素" class="headerlink" title="3.6.1.3 获取body元素"></a>3.6.1.3 获取body元素</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">var</span> getBody <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="3-6-1-4-获取html元素"><a href="#3-6-1-4-获取html元素" class="headerlink" title="3.6.1.4 获取html元素"></a>3.6.1.4 获取html元素</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
       <span class="token keyword">var</span> getHtml <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-6-2-事件基础"><a href="#3-6-2-事件基础" class="headerlink" title="3.6.2 事件基础"></a>3.6.2 事件基础</h4><p><strong>事件概念：</strong>（触发—响应机制）</p>
<p>JavaScript使我们有能力创建动态页面，而事件是可以被JavaScript侦测到的行为。</p>
<blockquote>
<p> 网页中的每个元素都可以产生某些可以触发JavaScript的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p>
</blockquote>
<p><strong>事件有三部分组成（事件三要素）：事件源、事件类型、事件处理程序</strong></p>
<p><strong>事件源：</strong>事件被触发的对象</p>
<p><strong>事件类型：</strong>如何触发？什么事件？比如鼠标点击（onclick）还是鼠标经过，还是键盘按下</p>
<p><strong>事件处理程序：</strong>通过一个函数赋值的方式完成</p>
<p>比如点击一个按钮，弹出对话框</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;事件源
 var btn &#x3D; document.getElementById(&#39;btn&#39;);
 btn.onclick事件类型（点击）
 btn.onclick &#x3D; function() &#123;
 &#x2F;&#x2F;事件处理程序 弹出对话框
            alert(&#39;石雨&#39;);
 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="3-6-2-1-执行事件的步骤"><a href="#3-6-2-1-执行事件的步骤" class="headerlink" title="3.6.2.1 执行事件的步骤"></a>3.6.2.1 执行事件的步骤</h5><ul>
<li><p>获取事件源</p>
</li>
<li><p>注册事件（绑定事件）</p>
</li>
<li><p>添加事件处理程序（采取函数赋值的形式）</p>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">123</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token comment">//获取事件源</span>
<span class="token keyword">var</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注册事件（绑定事件）</span>
div<span class="token punctuation">.</span>onclick
<span class="token comment">//添加事件处理程序（采取函数赋值的形式）</span>
div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被选中了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>常见鼠标事件</strong></p>
<p><img src="D:\Appinstall\Typora\所有内容\Web学习笔记\JS学习笔记\2.JS学习.assets\QQ截图20210223195611.png"></p>
<h4 id="3-6-3-操作元素"><a href="#3-6-3-操作元素" class="headerlink" title="3.6.3 操作元素"></a>3.6.3 操作元素</h4><p>JavaScript的DOM操作可以改变网页内容、结构和样式，我们可以利用DOM操作元素来改变元素里面的内容、属性等。注意以下都是属性</p>
<h5 id="3-6-3-1-改变元素内容"><a href="#3-6-3-1-改变元素内容" class="headerlink" title="3.6.3.1 改变元素内容"></a>3.6.3.1 改变元素内容</h5><p>从起始位置到终止位置的内容,但它去除 html标签，同时空格和换行也会去掉</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>innerText<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行```</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span>innerHTML<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>element.innerText</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">'btn'</span><span class="token operator">></span>显示当前系统时间<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>当前时间<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>script<span class="token operator">></span>
        <span class="token comment">//需求 当点击按钮，div里面的时间会发生变化</span>
        <span class="token comment">//获取元素（事件源）</span>
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注册事件</span>
        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> timer<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>元素可以不添加事件(只要刷新页面就会执行)</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//不用注册事件</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>element.innerHTML与element.innerText的区别</strong></p>
<ul>
<li><p>element.innerHTML不识别Html标签，非标准</p>
<p><strong>innerHTML可以识别引号里面的HTML标签</strong></p>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'test'</span><span class="token operator">></span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;strong>今天是：&lt;/Strong>2021年'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>element.innerText识别Html标签，W3S标准</li>
</ul>
<p><strong>innerText不可以识别引号里面的HTML标签</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'test'</span><span class="token operator">></span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span>innerTests <span class="token operator">=</span> <span class="token string">'&lt;strong>今天是：&lt;/Strong>2021年'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这两个属性是可读取的 可以获取元素里面的内容</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p<span class="token operator">></span>
我是用来测试的
<span class="token operator">&lt;</span>span<span class="token operator">></span>我也是<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
 <span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//innerText会去除空格和标签 我是用来测试的 我也是</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会空格和标签</span>
<span class="token comment">/**我是用来测试的
        &lt;span>我也是&lt;/span>**/</span>
 
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-6-3-2-常用元素的属性操作"><a href="#3-6-3-2-常用元素的属性操作" class="headerlink" title="3.6.3.2 常用元素的属性操作"></a>3.6.3.2 常用元素的属性操作</h5><p>案例一：通过点击不同的图片，会展示出不同的图片。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ding"</span><span class="token operator">></span>丁志君<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
   <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"yu"</span><span class="token operator">></span>石雨<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
   <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"image/test.jpg"</span> alt<span class="token operator">=</span><span class="token string">"首页图片"</span><span class="token operator">></span>
   <span class="token operator">&lt;</span>script<span class="token operator">></span>
       <span class="token keyword">var</span> ding <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ding'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">var</span> yu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.yu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       ding<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'image/ding.jpg'</span><span class="token punctuation">;</span><span class="token comment">//修改图片链接属性</span>
           img<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token string">'这是丁志君'</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       yu<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'image/yu.png'</span><span class="token punctuation">;</span><span class="token comment">//修改图片链接属性</span>
           img<span class="token punctuation">.</span>alt <span class="token operator">=</span> <span class="token string">'这是我老婆'</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>案例二：根据不同的时间显示不同的图片，不同的问候语</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">	<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"image/test.jpg"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"image"</span> alt<span class="token operator">=</span><span class="token string">"首页图片"</span> title<span class="token operator">=</span><span class="token string">"首页图片"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token comment">//获取图片元素</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取时间对象</span>
<span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取时间格式</span>
<span class="token keyword">function</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> nowhour <span class="token operator">=</span> nowTime<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nowhour<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// console.log(getHour());</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'现在是凌晨'</span> <span class="token operator">+</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'点,还不睡？等着猝死呢！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">&lt;=</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'记得吃早饭哦！'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'吃午饭了吗！亲'</span><span class="token punctuation">)</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'image/zhongwu.jpg'</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">&lt;=</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'晚饭不要吃太多哦！'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">&lt;=</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'干哈呢！都晚上'</span> <span class="token operator">+</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'点了,还不睡？快睡觉去~'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-6-3-3-表单属性修改"><a href="#3-6-3-3-表单属性修改" class="headerlink" title="3.6.3.3 表单属性修改"></a>3.6.3.3 表单属性修改</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"点我"</span><span class="token operator">></span>
   <span class="token operator">&lt;</span>script<span class="token operator">></span>
       <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'皮一下'</span><span class="token punctuation">;</span> <span class="token comment">//修改input中的value属性</span>
           btn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//禁用点击</span>
       <span class="token punctuation">&#125;</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>仿登录隐藏密码案例：</strong></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
